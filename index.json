{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/aero/cotizador/1.0.0"
    },
    {
      "url": "http://virtserver.swaggerhub.com/aero/cotizador/1.0.0"
    }
  ],
  "info": {
    "title": "Cotizador API",
    "x-logo": {
      "url": "https://sitio.aero.tur.ar/assets/logo-positive-ac9a94f014542271c698fdd81c08a30f0ae53f50c7eedfe418680a82b797b975.svg"
    },
    "description": "Docs for using the Cotizador API.\n# Introduction\n- This document is in beta version. Modifications could be made or new\ninformation could be added.\n- You will need access credentials in order to use the API.\n- This API works by polling. You will need to send the same request to\nthe endpoint at hand until the `transaction_status` is `finished`.\n- All the API responses are on JSON format. There are four root keys on every endpoint response:\n  - `transaction_status`: It indicates if you need to keep polling. Possible values are: `continue`, `finished`.\n  - `status`: It indicates if the response was successful or if it finished with error or warnings. Possible values are: `ok`, `warning`, `error`.\n  - `data`: It includes the response data according to the request.\n  - `data_type`: It indicates `data`'s data type.\n- Responses also have a fifth element called `metadata`, which is a field destined to save metadata information such as the request ID (`request_id`) and the provided query (`query`). Several endpoints add extra information to this field.\n- We use the words **item** and **rate** interchangeably. An item/rate is a unique quote that could include:\n  - one or more hotel rooms, or\n  - a flight ticket, or\n  - a land product service (excursion, transfer, visa, etc.), or\n  - a travel assistance, or\n  - a circuit\n- All items have the same format.\n- A reservation is a set of one or more items that can be booked.\n- The passengers' distribution for an item search must be equal to this item's distribution in the spots assignment process. For example, if you are looking for a hotel with two rooms and a distribution of adults and children, you must respect this on the spots assignment process. This last operation will be explained later.\n- There is support for different currencies. The current supported currencies are:\n\n  - Argentine peso (ARS).\n  - American dollar (USD).\n  - Euro (EUR).\n  - Pound sterling (GBP).\n\n# Booking flow\n## 1. Introduction\nAs explained in the section above, the API was designed with the purpose of booking **items/rates** from different types and providers.\n\nThe booking flow starts with a search for items. Supported item types are:\n  - Hotels.\n  - Flights.\n  - Land products.\n  - Travel assistances.\n  - Circuits.\n  - Packages.\n\nThere are several endpoints to get different items according to their types. In this example we are considering a hotel booking, so the endpoint for searching hotels is `GET /hotels`.\n\nIn order to book items, you need to generate a **reservation**, add the desired items to that reservation, and also add **passengers**. The passengers must be also assigned to **spots**.\n\nA spot is a room, a seat or any generic place in which a passenger must be assigned. For example: on hotels and circuits, passengers have to be associated to rooms, whereas on flights, a passenger must be associated to a seat. This assignment process is needed because a reservation could include many items and passengers, and the API gives the possibility to customize the distribution.\n\nOnce the items and passengers (in addition to their respective distribution) are added to the reservation, the booking process is completed with two additional operations: **verification** and **confirmation**.\n\nOn the one hand, the verification is needed to ensure the items' availability, which is a mandatory process for most providers. On the other hand, and only when the verification has succeeded, the confirmation operation performs the actual booking on the provider and on our backend systems.\n\nYou have to consider that items could have different **applicable extra fees**. The most common one is the **cancellation fee**, which is an amount you must pay if you (or your clients) cancel a reservation. It is expressed using time intervals because they mostly depend on the time between the cancellation date and the reservation date-in. These fees are present on **hotels, circuits and packages**.\n\nAll the endpoints on the different stages of the booking process have their own validations and error management using a standard response format. This information can be found on each endpoint documentation.\n\n## 2. Items search\nThe first step of the booking process is the items acquisition. All the item types' endpoints have support for several filtering, sorting and pagination standard parameters.\n\nIr order to get items, it is necessary to perform a polling action, sending the same request multiple times to the API. This polling will generate items as soon as the first provider responds and it will finish when the last one does.\n\nThe search response has the same standarized format as the rest of the endpoints, each customizing it for its own purpose. For every search operation, the `data` field on the response represents a collection (array) of rates/items with a stardard format. This process also adds extra information to the `metadata` field, such as pagination data (`page`, `per_page`, `total_results` and `total_pages` values) and search information (`min_price` and `max_price`, for the current page and for the whole results, which is known as `static` information). \n\n### Item structure\nThe items' structure is standarized on all the endpoints: \n\n  - One of the most important values for the booking process is the `id`. Each item has an unique `id` value.\n\n  - The item pricing can be obtained from the `total` field. It is a dictionary which contains the value expressed on the different supported currencies. If you need pricing details, you can get them using the `rates` value, which  expresses the gross (`bruto`), net (`neto`), taxes (`taxes`) and commission (`commission`), all of them expressed with all the supported currencies.\n\n  - All the items expire, which means that they will become invalid after a certain period of time. This information is found in the `expires_at` field.\n  \n  - All the items also have their origin information: its `kind` value represents the item type (`hotel`, `flight`, `circuit`, `land_product`, `assistance`, `package`, etc), whereas its `source` value represents its provider (`aero`, `nemo`, `netviax`, etc).\n\n  - Items also have extra information related to their own nature (for example, `rooms`, `images`, `stars` and `regime` for hotels, or `departure_flights`, `arrival_flights`, `baggage_included` and `airline` for flights). This information is located on each item's `info` field (inside its `data` field), and it is documented on each endpoint. The `info` field also includes internal backend information which can be ignored.\n\n  - Items have the provided distribution of the search process included on their `query_spots` field. It is an array of spots, which are objects that describe the distribution. This information will be used to generate reservation's spots.\n  \n  - As it was explained before, items could have appliable extra fees. This information can be found on the item's `info` field under the `cancellation` key. It is constituted by two different values:   \n  \n    - `status`: It represents the fees status at the moment of the query. Possible values are:\n      - `with_fee`: The item has fees at the current date.\n      - `without_fee`: The item does not have any fees at the current date.\n      - `unknown`: The search process did not determine wheter the item has any fees or not, so you need to request fees on a different endpoint. This endpoint is `GET /:item_source/:item_id/fees` (for example, for a hotel it would be `GET /hotels/:item_id/fees`).\n    - `charges`: It is an array which represents a fees schedule. The collection is ordered by date (using the `from` attribute) and each element has the following attributes:\n      - `type`: It represents the fee type. It could be `cancellation` or `no_show`.\n      - `from`: It represents the datetime when the fee starts.\n      - `to`: It represents the datetime when the fee finishes.\n      - `prices`: It represents the fee amount. It is expressed on all the supported currencies with the same format as the item `rates`.\n\n**Search response format**\n\n```\n{\n  \"status\": \"ok\",\n  \"transaction_status\": \"finished\",\n  \"data_type\": \"list\",\n  \"data\": [\n    ...\n  ],\n  \"metadata\": {\n    ...\n  }\n}\n```\n\n**Item format** _(located inside search response's `data` field)_\n\n```\n{\n  \"id\": \"hotel_47e45b5e-b422-4349-bfea-5821a77ed8c6\",\n  \"name\": \"Hard Rock Hotel Cancún\",\n  \"expires_at\": \"2018-07-05T11:47:56+00:00\",\n  \"locations\": [\n    {\n      \"id\": 3453,\n      \"name\": \"México, Cancún\"\n    }\n  ],\n  \"date_in\": \"2018-12-02\",\n  \"date_out\": \"2018-12-15\",\n  \"kind\": \"hotel\",\n  \"source\": \"aero\",\n  \"currency\": \"USD\",\n  \"total\": {\n      \"ars_value\": 179860.04,\n      \"usd_value\": 9643.97,\n      \"eur_value\": 7719.32,\n      \"gbp_value\": 7361.81\n  },\n  \"rates\": [\n    {\n      \"type\": \"bruto\",\n      \"value\": {\n        \"ars_value\": 175473.19,\n        \"usd_value\": 9408.75,\n        \"eur_value\": 7531.04,\n        \"gbp_value\": 7182.25\n      }\n    },\n    {\n      \"type\": \"neto\",\n      \"value\": {\n        \"ars_value\": 140378.55,\n        \"usd_value\": 7527,\n        \"eur_value\": 6024.83,\n        \"gbp_value\": 5745.8\n      }\n    },\n    {\n      \"type\": \"taxes\",\n      \"value\": {\n        \"ars_value\": 4386.85,\n        \"usd_value\": 235.22,\n        \"eur_value\": 188.28,\n        \"gbp_value\": 179.56\n      }\n    }\n  ],\n  \"query_spots\": [\n    {\n      \"adults_number\": 2,\n      \"children_ages\": []\n    }\n  ],\n  ...,\n  \"info\": {\n    ...,\n    \"cancellation\": {\n      \"status\": \"without_fee\",\n      \"charges\": [\n        {\n          \"type\": \"cancellation\",\n          \"from\": \"2018-11-29T00:00:00+00:00\",\n          \"to\": \"2018-12-15T00:00:00+00:00\",\n          \"prices\": [\n            {\n              \"type\": \"bruto\",\n              \"value\": {\n                \"ars_value\": 8681.57,\n                \"usd_value\": 465.5,\n                \"eur_value\": 372.6,\n                \"gbp_value\": 355.34\n              }\n            },\n            {\n              \"type\": \"neto\",\n              \"value\": {\n                \"ars_value\": 6945.26,\n                \"usd_value\": 372.4,\n                \"eur_value\": 298.08,\n                \"gbp_value\": 284.27\n              }\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n## 3. Reservation management\nAs explained in the introduction, a reservation is a collection of items that can be booked. The reservation process involves the following operations:\n  - Create reservation.\n  - Add items to reservation.\n  - Add passengers to reservation.\n  - Assign passengers to reservation's spots.\n  - Verify reservation.\n  - Confirm reservation.\n  \n### **A. Create reservation**\nThis process creates a reservation with a unique `id`, which is returned as part of the reservation data. This value is needed to manage the reservation as a resource on the next stages of the booking process. The endpoint is `GET /reservations/new`.\n\n### **B. Add items to reservation**\nThis process adds an item to a reservation. Both item and reservation are referenced with their identifiers. The endpoint is `POST /reservations/:reservation_id/items/:item_id`.\n\n### **C. Add passengers to reservation**\nThis process creates passengers on the reservation. You can add all the passengers with a  single request. The endpoint is `POST /reservations/:reservation_id/passengers/add`\n\n### **D. Assign passengers to reservation's spots**\nThis process distributes existing passengers among the available spots. These spots are automatically created when items are added to a reservation. In order to use this functionality, you need to know both spots and passengers identifiers. This can be obtanined asking the API for the reservation details with the endpoint `GET /reservations/:reservation_id`.\n\nFor example, if we add a flight to the reservation, then the details will be:\n\n```\n{\n  \"status\": \"ok\",\n  \"transaction_status\": \"finished\",\n  \"data_type\": \"reservation\",\n  \"data\": {\n    \"id\": \"326bbed4-d9f0-4dd0-ad4b-1306d2d67235\",\n    ...,\n    \"items\": [...],\n    \"passengers\": [\n      {\n        \"first_name\": \"Bruce\",\n        \"last_name\": \"Wayne\",\n        ...,\n        \"id\": \"c6b059dc-9c78-412a-9634-f6ee03853cf4\"\n      },\n      {\n        \"first_name\": \"Damian\",\n        \"last_name\": \"Wayne\",\n        ...,\n        \"id\": \"803eb7fe-9286-4df4-8297-ac9f43b92f48\"\n      }\n    ],\n    \"passengers_distribution\": [\n      {\n        \"item_id\": \"flight_1c4437be-3063-4cfd-8578-89c91502fdc4\",\n        \"type\": \"seat\",\n        \"spots\": [\n          {\n            \"id\": \"eb7048d1-803a-4bf2-b8f5-0693c0e4a86d\",\n            \"type\": \"ADT\",\n            \"passenger_ids\": [],\n            \"query_spot\": {\n            \"adults_number\": 1,\n            \"children_ages\": []\n            }\n          },\n          {\n            \"id\": \"491e2352-7ad2-48c8-b53b-e903347c98ef\",\n            \"type\": \"ADT\",\n            \"passenger_ids\": [],\n            \"query_spot\": {\n              \"adults_number\": 1,\n              \"children_ages\": []\n            }\n          }\n        ]\n      }\n    ],\n  }\n}\n```\n\nAs we can see, spots were automatically generated for the item (in this case, **seats** because the item is a flight) using the provided search distribution. Your job is to complete the `passenger_ids` value  of every spot.\n\nBesides that, the reservation details also contain information related to the passengers you have already added to this reservation.\n\nSo, the endpoint to assign a passenger to a particular spot on a reservation is `POST /reservations/:reservation_id/spots/:spot_id/passengers/:passenger_id`.\n\n### **E. Verify reservation**\nAs explained above, the verification is needed to ensure the items availability, which is a mandatory process for most of the providers. You must verify the reservation before its confirmation process using the endpoint `POST /reservations/:reservation_id/verify`.\n\nOnce the `transaction_status` is `finished`, the verification returns different `status` values according to the result:\n\n  - `ok`: all the items are available.\n  - `warning`: at least one item is not unavailable.\n  - `error`: all the items are unavailable or an error occurred.\n  \n  The operation's results are returned in the `summary` field, which is contained by `data`. This is helpful in order to know which items are unavailable. The `summary` value includes information about the availability status of the items. It is an array made up of a collection of elements, each one of them with the following information: \n    \n  - `element_id`: it is equal to the item's ID.\n  - `element_name`: it is equal to the item's name.\n  - `status`: it represents the result of the operation and could be:   \n      - `ok`: the item is available.\n      - `warning`: the item is available but you must consider something. You should check `type`, `subtype` and `suggested_message`. An example could be that the item has cancellation fees at the time of the request.\n      - `error`: the item is unavailable or and error occurred. You should check `type`, `subtype` and `suggested_message`.\n  \n  - `expires_at`: it represents the verification expiration time, and could be the same as the item's `expires_at` or a different one returned by the provider.\n  - `source`: it will always be `verification`, and it is needed to differentiate this summary's items from the confirmation ones.\n  - `type`: it represents the error type if `status` is `warning` or `error`.\n  - `subtype`: it represents the error subtype if `status` is `warning` or `error`.\n  - `suggested_message`: it represents an error's suggested message if `status` is `warning` or `error`.\n  \n   If all the items are available, you will be ready to proceed to the confirmation process.\n   \n  **Note 1:** This endpoint also works with polling, so you will have results when the first provider verifies its items.\n  \n  **Note 2:** The verification is mandatory before the confirmation process, but it could be done before adding passengers and assigning them to spots.\n  \n  **Note 3:** Once the `transaction_status` is `finished`, the `summary` should contain the exact same number of elements as the items you have verified, regardless of their `status`.\n\n### **F. Confirm reservation**\nThe confirmation operation performs the actual booking on the provider and on our backend systems. It books each of the reservation's items. You must confirm the reservation using the endpoint `POST /reservations`.\n\nOnce the `transaction_status` is `finished`, the confirmation returns different `status` values according to the result:\n\n- `ok`: all the items were succesfully booked.\n- `warning`: at least one item was not booked.\n- `error`: all the items were not booked or and error has occurred.\n  \nThe operation's results are returned on the `summary` value, which is contained by `data`. This is helpful in order to know which items could not be booked. The `summary` value includes information about the booking results of the items. It is an array made up of a collection of elements, each one of them with the following information:\n    \n  - `status`: it represents the result of the operation and could be:   \n      - `ok`: the item was booked.\n      - `warning`: the item was booked but you must consider something. You should check `type`, `subtype` and `suggested_message`.\n      - `error`: the item was not booked or and error has occurred. You should check `type`, `subtype` and `suggested_message`.\n  \n  - `source`: it will always be `reservation`, and it is needed to differentiate this summary's items from the verification ones.\n  - `type`: it represents the error type if `status` is `warning` or `error`.\n  - `subtype`: it represents the error subtype if `status` is `warning` or `error`.\n  - `suggested_message`: it represents an error's suggested message if `status` is `warning` or `error`.\n  \n**Note 1:** This endpoint also works with polling, so you will have results when the first provider confirms its items.\n\n**Note 2:** Once the `transaction_status` is `finished`, the `summary` should contain **at least** the same number of elements as the items you have confirmed, regardless of their `status`. It could also contain one extra element if the connection with our backend system failed.\n\n## 4. Annex\n### A. Error/warning types for verification and reservation\n\n<style>\n  th { text-transform: uppercase; } \n  td:first-child { font-weight: bold;}\n</style>\n<table>\n  <thead>\n    <tr>\n      <th>Type</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td class=\"text-bold\">availability</th>\n      <td>The item has no availability.</th>\n    </tr>\n    <tr>\n      <td>cancellation_fees</td>\n      <td>An error related to cancellation fees happened.</td>\n    </tr>\n    <tr>\n      <td>cannot_be_alone</td>\n      <td>The service requires another service in order to be booked.</td>\n    </tr>\n    <tr>\n      <td>expiration</td>\n      <td>The service has expired.</td>\n    </tr>\n    <tr>\n    <tr>\n      <td>failed_transaction</td>\n      <td>An unexpected internal error has occurred.</td>\n    </tr>\n    <tr>\n      <td>middle_office</td>\n      <td>An error related to our backend system has occurred.</td>\n    </tr>\n    <tr>\n      <td>reservation</td>\n      <td>An error related to reservation has occurred.</td>\n    </tr>\n      <td>service_timeout</td>\n      <td>The service took a long time to respond.</td>\n    </tr>\n    <tr>\n      <td>verification</td>\n      <td>An error related to verification has occurred.</td>\n    </tr>\n  </tbody>\n</table>\n\n### B. Error/warning subtypes for verification and reservation\n\n<table>\n  <thead>\n    <tr>\n      <th>Subtype</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>airport_not_found</th>\n      <td>There is no airport for the given location.</th>\n    </tr>\n    <tr>\n      <td>assistance_requires_hotel</td>\n      <td>The assistance can only be booked with a hotel. Please, add a hotel.</td>\n    </tr>\n    <tr>\n      <td>child_info_missing</td>\n      <td>Children information is missing or incomplete.</td>\n    </tr>\n    <tr>\n      <td>circuit_on_request</td>\n      <td>The circuit is unavailable. Please, contact an Aero seller to deal with the matter.</td>\n    </tr>\n    <tr>\n      <td>confirmation_express_could_not_be_reserved</td>\n      <td>An error happened while trying to book the hotel with express confirmation. Please, contact an Aero seller or try again later.</td>\n    </tr>\n    <tr>\n      <td>connection_error</td>\n      <td>An connection error has occurred.</td>\n    </tr>\n    <tr>\n      <td>connection_failed</td>\n      <td>Unable to connect with external server.</td>\n    </tr>\n    <tr>\n      <td>contract_limit_reached</td>\n      <td>The contract does not have funds enough to perform the reservation.</td>\n    </tr>\n    <tr>\n      <td>date_in_too_far</td>\n      <td>date_in must be nearer to today's date.</td>\n    </tr>\n    <tr>\n      <td>expiration</td>\n      <td>The broker informs that the service has expired.</td>\n    </tr>\n    <tr>\n      <td>external_service_timeout</td>\n      <td>The external service has taken too long to respond.</td>\n    </tr>\n    <tr>\n      <td>fees_cannot_be_checked</td>\n      <td>An error has occurred while trying to get cancellation fees.</td>\n    </tr>\n    <tr>\n      <td>flight_requires_hotel</td>\n      <td>The flight can only be booked with a hotel. Please, add a hotel.</td>\n    </tr>\n    <tr>\n      <td>flights_missing_in_request</td>\n      <td>The sent data is not enough to regenerate the itinerary.</td>\n    </tr>\n    <tr>\n      <td>incomplete_journey</td>\n      <td>The requested itinerary could not be generated.</td>\n    </tr>\n    <tr>\n      <td>invalid_item</td>\n      <td>The rate is no longer valid.</td>\n    </tr>\n    <tr>\n      <td>invalid_request</td>\n      <td>Some of the sent parameters are invalid.</td>\n    </tr>\n    <tr>\n      <td>invalid_reservation_type</td>\n      <td>The reservation type is invalid.</td>\n    </tr>\n    <tr>\n      <td>item_not_found</td>\n      <td>The broker could not find the rate by its identifier.</td>\n    </tr>\n    <tr>\n      <td>manual_verification_needed</td>\n      <td>User manual verification is needed. The reservation might have been made but automatic cancellation might not be activated.</td>\n    </tr>\n    <tr>\n      <td>no_availability</td>\n      <td>The rate is no longer available.</td>\n    </tr>\n    <tr>\n      <td>no_flights_found</td>\n      <td>No flights have been found.</td>\n    </tr>\n    <tr>\n      <td>pax_could_not_be_added</td>\n      <td>An error happened while trying to add a passenger to the reservation.</td>\n    </tr>\n    <tr>\n      <td>proximity</td>\n      <td>The item is close to have cancellation fees.</td>\n    </tr>\n    <tr>\n      <td>rejected_by_configuration</td>\n      <td>The reservation could not be performed because the service has cancellation fees.</td>\n    </tr>\n    <tr>\n      <td>reservation_failed</td>\n      <td>An error happened while trying to save the reservation in our backend system (MiddleOffice).</td>\n    </tr>\n    <tr>\n      <td>reservation_not_found</td>\n      <td>The reservation was not found on our backend system (MiddleOffice).</td>\n    </tr>\n    <tr>\n      <td>search_expiration</td>\n      <td>Search results have expired. Please, perform a new search.</td>\n    </tr>\n    <tr>\n      <td>service_bad_request</td>\n      <td>An error happened while reading the information that has been sent to our backend system (MiddleOffice).</td>\n    </tr>\n    <tr>\n      <td>service_error</td>\n      <td>An error happened while trying to create a service for the reservation.</td>\n    </tr>\n    <tr>\n      <td>unauthorized</td>\n      <td>You are not authorized to perform the requested action.</td>\n    </tr>\n    <tr>\n      <td>unknown</td>\n      <td>An unknown error has occurred.</td>\n    </tr>\n    <tr>\n      <td>unknown_agency</td>\n      <td>The agency could not be identified.</td>\n    </tr>\n    <tr>\n      <td>unknown_reservation_status</td>\n      <td>The operator must verify the reservation to check if it have succeed.</td>\n    </tr>\n    <tr>\n      <td>unknown_seller</td>\n      <td>The seller could not be identified.</td>\n    </tr>\n    <tr>\n      <td>unknown_user_role</td>\n      <td>The user role could not be identified.</td>\n    </tr>\n    <tr>\n      <td>user_cannot_reserve</td>\n      <td>The item has cancellation fees and the user does not have permission to book elements with this characteristic.</td>\n    </tr>\n    <tr>\n      <td>with_fee</td>\n      <td>The item has cancellation fees.</td>\n    </tr>\n  </tbody>\n</table>\n",
    "version": "2.0",
    "contact": {
      "email": "federico.bouche@snappler.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "paths": {
    "/hotels": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "summary": "Gets a list of hotels.",
        "description": "# Gets a collection of hotel rates within item format.\n",
        "operationId": "searchHotels",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "$ref": "#/components/parameters/locationIdsParam"
          },
          {
            "$ref": "#/components/parameters/paxParam"
          },
          {
            "$ref": "#/components/parameters/dateInParam"
          },
          {
            "$ref": "#/components/parameters/dateOutParam"
          },
          {
            "$ref": "#/components/parameters/sortByParam"
          },
          {
            "$ref": "#/components/parameters/sortDirectionParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam"
          },
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/currencyParam"
          },
          {
            "$ref": "#/components/parameters/minPriceParam"
          },
          {
            "$ref": "#/components/parameters/maxPriceParam"
          },
          {
            "in": "query",
            "name": "reduced",
            "description": "Gets a response with less fields. This option is great for displaying results in a map.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": false
            }
          },
          {
            "in": "query",
            "name": "hotel_name",
            "description": "Name of the hotel to match with.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Hilton"
            }
          },
          {
            "in": "query",
            "name": "contract",
            "description": "Source of the results where to look.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "nemo",
                "aero"
              ],
              "example": "nemo"
            }
          },
          {
            "in": "query",
            "name": "only_express_confirmation",
            "description": "When true, only express confirmation hotels will be returned.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "in": "query",
            "name": "exclude_sales_stoppage",
            "description": "When true, only sellable rates will be returned.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "in": "query",
            "name": "regimes",
            "description": "Ids of the regimes to filter by",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "example": 1
              }
            }
          },
          {
            "in": "query",
            "name": "only_allotments",
            "description": "When true, only allotment hotels will be returned.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "stars",
            "description": "Amount of stars to filter by.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "operator_ids",
            "description": "Ids of the operators to filter by. The ids are not numbers, are initials.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "RIU"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a collection of hotel rates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "list"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "data": {
                      "type": "array",
                      "description": "Collection of hotel rates",
                      "items": {
                        "$ref": "#/components/schemas/Hotel"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/hotels/{itemId}/rates": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "summary": "Gets a list of rates associated with a previous obtained rate",
        "description": "# Gets a collection of hotel rates associated with a previous obtained rate. *This collection includes the original hotel rate*.\n",
        "operationId": "otherHotelRates",
        "parameters": [
          {
            "in": "header",
            "name": "X-Request-ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "itemId",
            "description": "Id of the hotel rate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "aaabc212-asdasd"
            }
          },
          {
            "$ref": "#/components/parameters/sortByParam"
          },
          {
            "$ref": "#/components/parameters/sortDirectionParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam"
          },
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/minPriceParam"
          },
          {
            "$ref": "#/components/parameters/maxPriceParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a collection of hotel rates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "data": {
                      "type": "array",
                      "description": "Collection of hotel rates",
                      "items": {
                        "$ref": "#/components/schemas/Hotel"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/hotels/{itemId}/fees": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "summary": "Gets a collection of fees associated with a previous obtained rate",
        "description": "# Get a list of fees associated with a previous obtained rate.\n",
        "operationId": "hotelFees",
        "parameters": [
          {
            "in": "header",
            "name": "X-Request-ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "itemId",
            "description": "Id of the hotel rate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "aaabc212-asdasd"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a collection of fees",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "status of the request"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "status of the transaction"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "type of the data value"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "data": {
                      "type": "array",
                      "description": "Collection of hotel rates",
                      "items": {
                        "$ref": "#/components/schemas/Fee"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/hotels/{itemId}/info": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "summary": "Gets additional information about the hotel of the item.",
        "description": "# Gets additional information about the hotel of the specified item.\n",
        "operationId": "hotelInfo",
        "parameters": [
          {
            "in": "header",
            "name": "X-Request-ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "itemId",
            "description": "Id of the hotel rate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "hotel_0f58e8e9-6bcd-4b5b-80dd-d44bfd4d889e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with information about the hotel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "hotel_info"
                    },
                    "data": {
                      "$ref": "#/components/schemas/HotelAdditionalInformation"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "RequestId received in the request.",
                          "example": "e9f95047-fcc6-4b95-bad6-55587be545d0"
                        },
                        "query": {
                          "type": "object",
                          "properties": {
                            "hotel_id": {
                              "type": "string",
                              "description": "Id of the hotel.",
                              "example": "SYY-1OPEJ-30S"
                            },
                            "source": {
                              "type": "string",
                              "description": "Service where to search the hotel information.",
                              "example": "nemo"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/hotels/{itemId}/tariffs": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "summary": "Gets all the tariffs for a particular hotel. Only for Aero.",
        "description": "# Gets all the tariffs for a particular hotel. Only for Aero.\n",
        "operationId": "hotelIndividualTariffs",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "in": "path",
            "name": "itemId",
            "description": "Id of the hotel rate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "hotel_0f58e8e9-6bcd-4b5b-80dd-d44bfd4d889e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response with all tariffs for the hotel.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "hotel_tariff"
                    },
                    "data": {
                      "$ref": "#/components/schemas/HotelTariff"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "RequestId received in the request.",
                          "example": "e9f95047-fcc6-4b95-bad6-55587be545d0"
                        },
                        "query": {
                          "type": "object",
                          "properties": {
                            "item_id": {
                              "type": "string",
                              "description": "Item Id of the hotel rate which tariffs were requested.",
                              "example": "hotel_0f58e8e9-6bcd-4b5b-80dd-d44bfd4d889e"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/hotels/chains": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "summary": "Gets a list of hotel chains",
        "description": "# Gets a list of hotel chains with name and id\n",
        "operationId": "hotelChains",
        "responses": {
          "200": {
            "description": "hotel chains matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdAndText"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/hotels/operators": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "summary": "Gets a list of hotel operators",
        "description": "# Gets a list of hotel operators with name and id\n",
        "operationId": "hotelOperators",
        "responses": {
          "200": {
            "description": "hotel operators matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdAndText"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/hotels/regimes": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "summary": "Gets a list of hotel regimes",
        "description": "# Gets a list of hotel regimes with name and id\n",
        "operationId": "hotelRegimes",
        "responses": {
          "200": {
            "description": "hotel regimes matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdAndText"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/hotels/tariffs": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "summary": "Gets all the hotel tariffs in a particular location. Only for Aero.",
        "description": "# Gets all the hotel tariffs in a particular location. Only for Aero.\n",
        "operationId": "hotelTariffs",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "$ref": "#/components/parameters/locationIdsParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Response with all tariffs for the location.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HotelTariff"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "RequestId received in the request.",
                          "example": "e9f95047-fcc6-4b95-bad6-55587be545d0"
                        },
                        "query": {
                          "type": "object",
                          "properties": {
                            "location_ids": {
                              "type": "array",
                              "description": "Location Ids where the tariffs were requested.",
                              "items": {
                                "type": "integer",
                                "example": 3453
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/hotels/categories": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "summary": "Gets information about a hotel category.",
        "description": "# Gets information about a hotel category, like its stop sales.\n",
        "operationId": "hotelCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "in": "query",
            "name": "id",
            "description": "Id of the hotel category.",
            "required": true,
            "schema": {
              "type": "string",
              "example": 2181
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hotel category response with stop sales",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "category"
                    },
                    "data": {
                      "$ref": "#/components/schemas/HotelCategory"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "RequestId received in the request.",
                          "example": "e9f95047-fcc6-4b95-bad6-55587be545d0"
                        },
                        "query": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Id of the hotel category.",
                              "example": "2181"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/hotels/names": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "summary": "Gets a list of hotel names matching the sent param",
        "description": "# Gets a list of hotel names\n",
        "operationId": "hotelNames",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "id of the search that was previously obtained",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "uuid1234"
            }
          },
          {
            "in": "query",
            "name": "q",
            "description": "word to search for",
            "required": false,
            "schema": {
              "type": "string",
              "example": "hilton"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "countries matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "Hilton Miami Downtown"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/flights": {
      "get": {
        "tags": [
          "Flights"
        ],
        "summary": "Gets a list of flights.",
        "description": "# Gets a collection of flight rates.\n**IMPORTANT:** as finding flights for an specific range of dates is not always possible, a suggestions collection will be added to the response with rates that don’t exactly match the search params. This collection can be found inside `metadata`.\n",
        "operationId": "searchFlights",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "in": "query",
            "name": "origin_location_id",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 4239
            },
            "description": "If it is given, it defines the origin airport of the flights searched.  \nThe airport is determined by the IATA code associated to the location. \nThe origin airport is also the destination airport of the arrival flight.  \nIf neither of this parameter or `origin_city_id` parameter are defined, the default IATA code is BUE.\n"
          },
          {
            "in": "query",
            "name": "origin_city_id",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 667
            },
            "description": "If it is given, it defines the origin airport of the flights searched.  \nThe airport is determined by the IATA code associated to the city. \nThe origin airport is also the destination airport of the arrival flight.  \nIf neither of this parameter or `origin_location_id` parameter are defined, the default IATA code is BUE.\n"
          },
          {
            "$ref": "#/components/parameters/locationIdsParam"
          },
          {
            "$ref": "#/components/parameters/paxParam"
          },
          {
            "$ref": "#/components/parameters/dateInParam"
          },
          {
            "$ref": "#/components/parameters/dateOutParam"
          },
          {
            "$ref": "#/components/parameters/sortByParam"
          },
          {
            "$ref": "#/components/parameters/sortDirectionParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam"
          },
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/currencyParam"
          },
          {
            "$ref": "#/components/parameters/minPriceParam"
          },
          {
            "$ref": "#/components/parameters/maxPriceParam"
          },
          {
            "$ref": "#/components/parameters/airlinesParam"
          },
          {
            "in": "query",
            "name": "contract",
            "description": "Contract where to look at",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "aero",
                "netviax"
              ],
              "default": "aero"
            }
          },
          {
            "in": "query",
            "name": "suggestions_contract",
            "description": "**Exclusive for suggestions:** contract where to look at. Only available for suggested flights (`suggestions`) when `contract` is not defined.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "aero",
                "netviax"
              ],
              "default": "aero"
            }
          },
          {
            "in": "query",
            "name": "by_country",
            "description": "Group flights by destination country. Only available for flights returned by Aero Service.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "departure_layovers",
            "description": "Maximum number of layovers for the departure flights. When its value is 0, only flights with a direct departure flight will be returned. When its value is 1, flights with a direct departure flight and flights with one departure layover will be returned. The same rules apply for the remaining values.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "arrival_layovers",
            "description": "Maximum number of layovers for the arrival flights. When its value is 0, only flights with a direct arrival flight will be returned. When its value is 1, flights with a direct arrival flight and flights with one arrival layover will be returned. The same rules apply for the remaining values.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "min_departure_duration",
            "description": "Minimum duration of the departure flights.  \nThe flight duration is equal to the sum of the duration of each layover.  \nIf this filter is applied, only flight items with a departure flight duration equal to or greater than the specified duration will be returned.  \nThe format is HH:MM.\n",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/HourMinuteDuration"
            }
          },
          {
            "in": "query",
            "name": "max_departure_duration",
            "description": "Maximum duration of the departure flights.  \nThe flight duration is equal to the sum of the duration of each layover.  \nIf this filter is applied, only flight items with a departure flight duration at most equal to the specified duration will be returned.  \nThe format is HH:MM.\n",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/HourMinuteDuration"
            }
          },
          {
            "in": "query",
            "name": "min_arrival_duration",
            "description": "Minimum duration of the arrival flights.  \nThe flight duration is equal to the sum of the duration of each layover.  \nIf this filter is applied, only flight items with a arrival flight duration equal to or greater than the specified duration will be returned.  \nThe format is HH:MM.\n",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/HourMinuteDuration"
            }
          },
          {
            "in": "query",
            "name": "max_arrival_duration",
            "description": "Maximum duration of the arrival flights.  \nThe flight duration is equal to the sum of the duration of each layover.  \nIf this filter is applied, only flight items with a arrival flight duration at most equal to the specified duration will be returned.  \nThe format is HH:MM.\n",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/HourMinuteDuration"
            }
          },
          {
            "in": "query",
            "name": "min_departure_time",
            "description": "Minimum departure time for the first layover in the departure flights.  \nIts format is HH:MM, ranging from 00:00 to 23:59.\n",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Time"
            }
          },
          {
            "in": "query",
            "name": "max_departure_time",
            "description": "Maximum departure time for the first layover in the departure flights.  \nIts format is HH:MM, ranging from 00:00 to 23:59.\n",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Time"
            }
          },
          {
            "in": "query",
            "name": "min_arrival_time",
            "description": "Minimum departure time for the first layover in the arrival flights.  \nIts format is HH:MM, ranging from 00:00 to 23:59.\n",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Time"
            }
          },
          {
            "in": "query",
            "name": "max_arrival_time",
            "description": "Maximum departure time for the first layover in the arrival flights.  \nIts format is HH:MM, ranging from 00:00 to 23:59.\n",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a collection of flight rates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "list"
                    },
                    "data": {
                      "type": "array",
                      "description": "Collection of flight rates",
                      "items": {
                        "$ref": "#/components/schemas/Flight"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "example": "831aa426-bf1d-42b7-be75-ebb24056e5f7"
                        },
                        "query": {
                          "type": "object",
                          "description": "Contains all valid query input params sent by the user.\nIf a param is outside of the expected params, it must be filtered and not be shown in `query`.\n",
                          "properties": {
                            "date_in": {
                              "$ref": "#/components/schemas/Date"
                            },
                            "date_out": {
                              "$ref": "#/components/schemas/Date"
                            },
                            "location_ids": {
                              "type": "array",
                              "items": {
                                "type": "integer",
                                "example": 3453
                              }
                            },
                            "pax": {
                              "type": "string",
                              "example": "1"
                            },
                            "sort_by": {
                              "type": "string",
                              "example": "price"
                            },
                            "sort_direction": {
                              "type": "string",
                              "example": "asc"
                            },
                            "page": {
                              "type": "integer",
                              "example": 1
                            },
                            "per_page": {
                              "type": "integer",
                              "example": 10
                            },
                            "min_departure_duration": {
                              "$ref": "#/components/schemas/HourMinuteDuration"
                            },
                            "max_departure_duration": {
                              "$ref": "#/components/schemas/HourMinuteDuration"
                            },
                            "min_arrival_duration": {
                              "$ref": "#/components/schemas/HourMinuteDuration"
                            },
                            "max_arrival_duration": {
                              "$ref": "#/components/schemas/HourMinuteDuration"
                            }
                          }
                        },
                        "static": {
                          "type": "object",
                          "properties": {
                            "airlines": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "AA"
                              }
                            },
                            "min_price": {
                              "$ref": "#/components/schemas/AllCurrencies"
                            },
                            "max_price": {
                              "$ref": "#/components/schemas/AllCurrencies"
                            }
                          }
                        },
                        "airlines": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "AA"
                          }
                        },
                        "min_price": {
                          "$ref": "#/components/schemas/AllCurrencies"
                        },
                        "max_price": {
                          "$ref": "#/components/schemas/AllCurrencies"
                        },
                        "min_departure_duration": {
                          "$ref": "#/components/schemas/HourMinuteDuration"
                        },
                        "max_departure_duration": {
                          "$ref": "#/components/schemas/HourMinuteDuration"
                        },
                        "min_arrival_duration": {
                          "$ref": "#/components/schemas/HourMinuteDuration"
                        },
                        "max_arrival_duration": {
                          "$ref": "#/components/schemas/HourMinuteDuration"
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "per_page": {
                          "type": "integer",
                          "example": 10
                        },
                        "total_results": {
                          "type": "integer",
                          "example": 12
                        },
                        "total_pages": {
                          "type": "integer",
                          "example": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/flights/airlines": {
      "get": {
        "tags": [
          "Flights"
        ],
        "summary": "Gets a list of airlines",
        "description": "# Gets a list of airlines with name and iata code (two letters)\n",
        "operationId": "airlines",
        "responses": {
          "200": {
            "description": "Standard response with a collection of airlines",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "status of the request"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "status of the transaction"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "type of the data value"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "data": {
                      "type": "array",
                      "description": "collection of hotel rates",
                      "items": {
                        "$ref": "#/components/schemas/IdAndText"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/flights/all": {
      "get": {
        "tags": [
          "Flights"
        ],
        "summary": "Gets a list of all the available Aero's flights",
        "description": "# Gets a list of all the available Aero's flights\n",
        "operationId": "aeroFlights",
        "parameters": [
          {
            "$ref": "#/components/parameters/optionalLocationIdsParam"
          },
          {
            "$ref": "#/components/parameters/optionalDateInParam"
          },
          {
            "$ref": "#/components/parameters/optionalDateOutParam"
          },
          {
            "in": "query",
            "name": "only_with_vacants",
            "description": "Only flights with at least one vacant if true.\n",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a collection of aero flights (these are not items)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "status of the request"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "status of the transaction"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "type of the data value"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "data": {
                      "type": "array",
                      "description": "collection of Aero's flights",
                      "items": {
                        "$ref": "#/components/schemas/AeroFlight"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/flights/quote": {
      "get": {
        "tags": [
          "Flights"
        ],
        "summary": "Gets a quote for an specific flight sold by Aero.",
        "description": "# Gets a quote for an specific flight sold by Aero within item format.\n",
        "operationId": "flightQuote",
        "parameters": [
          {
            "in": "header",
            "name": "X-Request-ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/paxParam"
          },
          {
            "$ref": "#/components/parameters/dateInParam"
          },
          {
            "$ref": "#/components/parameters/dateOutParam"
          },
          {
            "in": "query",
            "name": "contract",
            "description": "Contract where to look at",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "aero"
              ],
              "default": "aero"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a flight rate",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "status of the request"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "status of the transaction"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "type of the data value"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "data": {
                      "type": "object",
                      "description": "flight item",
                      "items": {
                        "$ref": "#/components/schemas/Flight"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/land_products": {
      "get": {
        "tags": [
          "Land Products"
        ],
        "summary": "Gets a list of land products.",
        "description": "# Gets a collection of land product rates within item format.\n",
        "operationId": "searchLandProducts",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "$ref": "#/components/parameters/locationIdsParam"
          },
          {
            "$ref": "#/components/parameters/paxParam"
          },
          {
            "$ref": "#/components/parameters/dateInParam"
          },
          {
            "$ref": "#/components/parameters/dateOutParam"
          },
          {
            "$ref": "#/components/parameters/sortByParam"
          },
          {
            "$ref": "#/components/parameters/sortDirectionParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam"
          },
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/currencyParam"
          },
          {
            "$ref": "#/components/parameters/minPriceParam"
          },
          {
            "$ref": "#/components/parameters/maxPriceParam"
          },
          {
            "in": "query",
            "name": "contract",
            "description": "Contract where to look at",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "aero"
              ],
              "default": "aero"
            }
          },
          {
            "in": "query",
            "name": "kind",
            "description": "Kind of land product",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "admission",
                "excursion",
                "transfer",
                "visa",
                "others"
              ]
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Name of the land product to match with.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Salida en Catamarán"
            }
          },
          {
            "in": "query",
            "name": "excursion_durations",
            "description": "Durations of the excursion. This will match all the excursions with any of the given durations. When the land product is not an excursion, this param will be ignored.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "half_day",
                  "full_day"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "categories",
            "description": "Categories of the land product.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "private",
                  "regular"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "default",
            "description": "Only search for land products marked as default. Used within packages.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "kinds",
            "description": "Allowed kinds of the land product items. The search results will contain the items which kind match any of the specified kinds.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "admission",
                  "excursion",
                  "transfer",
                  "visa",
                  "others"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "excursion_categories",
            "description": "Available categories of the excursions. This filter will only apply to `excursion` items, the other items will remain untouched.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "private",
                  "regular"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "transfer_kinds",
            "description": "Available kinds of the transfers. This filter will only apply to `transfer` items, the other items will remain untouched.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "in_out",
                  "in",
                  "out",
                  "interhotel",
                  "in_out_city_tour",
                  "in_out_excursion"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "others_kinds",
            "description": "Available kinds of the `others` kinds. This filter will only apply to `others` items, the other items will remain untouched.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "admission",
                  "visa",
                  "internal_aereal",
                  "internal_aerial",
                  "generic",
                  "others"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a collection of land product rates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "list"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "example": "831aa426-bf1d-42b7-be75-ebb24056e5f7"
                        },
                        "query": {
                          "type": "object",
                          "properties": {
                            "date_in": {
                              "$ref": "#/components/schemas/Date"
                            },
                            "date_out": {
                              "$ref": "#/components/schemas/Date"
                            },
                            "location_ids": {
                              "type": "string",
                              "example": "3453"
                            },
                            "pax": {
                              "type": "string",
                              "example": "1"
                            }
                          }
                        },
                        "static": {
                          "type": "object",
                          "properties": {
                            "min_price": {
                              "$ref": "#/components/schemas/AllCurrencies"
                            },
                            "max_price": {
                              "$ref": "#/components/schemas/AllCurrencies"
                            }
                          }
                        },
                        "min_price": {
                          "$ref": "#/components/schemas/AllCurrencies"
                        },
                        "max_price": {
                          "$ref": "#/components/schemas/AllCurrencies"
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "per_page": {
                          "type": "integer",
                          "example": 10
                        },
                        "total_results": {
                          "type": "integer",
                          "example": 46
                        },
                        "total_pages": {
                          "type": "integer",
                          "example": 5
                        }
                      }
                    },
                    "data": {
                      "type": "array",
                      "description": "Collection of land product rates",
                      "items": {
                        "$ref": "#/components/schemas/LandProduct"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/packages": {
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "Gets a list of packages.",
        "description": "# Gets a collection of packages rates within item format.\n",
        "operationId": "searchPackages",
        "parameters": [
          {
            "in": "header",
            "name": "X-Request-ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/locationIdsParam"
          },
          {
            "$ref": "#/components/parameters/paxParam"
          },
          {
            "$ref": "#/components/parameters/dateInParam"
          },
          {
            "$ref": "#/components/parameters/dateOutParam"
          },
          {
            "$ref": "#/components/parameters/sortByParam"
          },
          {
            "$ref": "#/components/parameters/sortDirectionParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam"
          },
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/currencyParam"
          },
          {
            "$ref": "#/components/parameters/minPriceParam"
          },
          {
            "$ref": "#/components/parameters/maxPriceParam"
          },
          {
            "in": "query",
            "name": "reduced",
            "description": "Gets a response with less fields. This option is great for displaying results in a map. NOT YET IMPLEMENTED",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": false
            }
          },
          {
            "in": "query",
            "name": "hotel_name",
            "description": "Name of the hotel to match with.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Hilton"
            }
          },
          {
            "in": "query",
            "name": "hotels_contract",
            "description": "Hotel source where to look for",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "nemo",
                "aero"
              ],
              "example": "nemo"
            }
          },
          {
            "in": "query",
            "name": "flights_contract",
            "description": "Flight source where to look for",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "netviax",
                "aero"
              ],
              "example": "netviax"
            }
          },
          {
            "in": "query",
            "name": "only_express_confirmation",
            "description": "When true, only express confirmation hotels will be returned",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "in": "query",
            "name": "exclude_sales_stoppage",
            "description": "When true, only sellable rates will be returned",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "in": "query",
            "name": "regimes",
            "description": "Ids of the hotel regimes to filter by",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "example": 1
              }
            }
          },
          {
            "in": "query",
            "name": "stars",
            "description": "Amount of hotel stars to filter by",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "room_type",
            "description": "Type of room to search for",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "DBL",
                  "SGL",
                  "TPL"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "operator_ids",
            "description": "Ids of the operators regimes to filter by",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "ABC"
              }
            }
          },
          {
            "in": "query",
            "name": "land_product_ids",
            "description": "Ids of the land products to include in the packages",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "aaabcas123"
              }
            }
          },
          {
            "in": "query",
            "name": "flight_id",
            "description": "Id of the flight to include in the packages",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "exclude_flights",
            "description": "Do not include flights when generating the packages",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "include_default_land_products",
            "description": "Include land products marked as default in every package",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "include_default_assistances",
            "description": "Include travel assistances marked as default in every package",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a collection of hotel rates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "status of the request"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "status of the transaction"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "type of the data value"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "data": {
                      "type": "array",
                      "description": "collection of hotel rates",
                      "items": {
                        "$ref": "#/components/schemas/Package"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/circuits": {
      "get": {
        "tags": [
          "Circuits"
        ],
        "summary": "Gets a list of circuits.",
        "description": "# Gets a collection of circuit rates within item format.\n",
        "operationId": "searchCircuits",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "$ref": "#/components/parameters/locationIdsParam"
          },
          {
            "$ref": "#/components/parameters/countryIdsParam"
          },
          {
            "$ref": "#/components/parameters/paxParam"
          },
          {
            "$ref": "#/components/parameters/dateInParam"
          },
          {
            "$ref": "#/components/parameters/dateOutParam"
          },
          {
            "$ref": "#/components/parameters/sortByParam"
          },
          {
            "$ref": "#/components/parameters/sortDirectionParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam"
          },
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/currencyParam"
          },
          {
            "$ref": "#/components/parameters/minPriceParam"
          },
          {
            "$ref": "#/components/parameters/maxPriceParam"
          },
          {
            "in": "query",
            "name": "circuit_name",
            "description": "Name of the circuit to match with.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "EUROPA GRAN TOUR I"
            }
          },
          {
            "in": "query",
            "name": "contract",
            "description": "Source of the results where to look.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "aero",
                "special",
                "trapsatur",
                "surland"
              ],
              "example": "aero"
            }
          },
          {
            "in": "query",
            "name": "start_date",
            "description": "When it is set, only the circuits with this date will be shown.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Date"
            }
          },
          {
            "in": "query",
            "name": "min_duration",
            "description": "Minimum duration, in days, of the circuits returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 3
            }
          },
          {
            "in": "query",
            "name": "max_duration",
            "description": "Maximum duration, in days, of the circuits returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "in": "query",
            "name": "locations",
            "description": "It allows to narrow the results of the original search, selecting a subset of circuits that also includes all of this locations. Location Ids are expected.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "example": 2016
              }
            }
          },
          {
            "in": "query",
            "name": "countries",
            "description": "It allows to narrow the results of the original search, selecting a subset of circuits that also includes all of this countries. Country Ids are expected.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "example": 2
              }
            }
          },
          {
            "in": "query",
            "name": "start_locations",
            "description": "Names of the start locations to filter by. The circuits that will be matched are the ones with its starting location equal to any of the given names.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Madrid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a collection of circuit rates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "status of the request"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "status of the transaction"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "type of the data value"
                    },
                    "metadata": {
                      "type": "object",
                      "example": [
                        {
                          "request_id": "asdasdas"
                        }
                      ]
                    },
                    "data": {
                      "type": "array",
                      "description": "collection of circuit rates",
                      "items": {
                        "$ref": "#/components/schemas/Circuit"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/circuits/{itemId}": {
      "get": {
        "tags": [
          "Circuits"
        ],
        "summary": "Gets additional information about a particular circuit.",
        "description": "# Gets additional information about one circuit, like its itinerary and hotels.\n",
        "operationId": "showCircuit",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "description": "Id of the circuit rate.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "circuit_050a5ac6-78b9-4ca5-9629-9a0a494cd40b"
            }
          },
          {
            "$ref": "#/components/parameters/requestIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with the circuit information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "circuit"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CircuitInformation"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "RequestId received in the request.",
                          "example": "e9f95047-fcc6-4b95-bad6-55587be545d0"
                        },
                        "query": {
                          "type": "object",
                          "properties": {
                            "item_id": {
                              "type": "string",
                              "description": "Id of the circuit which information was requested.",
                              "example": "circuit_050a5ac6-78b9-4ca5-9629-9a0a494cd40b"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/circuits/{itemId}/availability": {
      "get": {
        "tags": [
          "Circuits"
        ],
        "summary": "Gets a list of rates for each start date of a circuit.",
        "description": "# Gets all the start dates for the given circuit, and it returns a circuit rate for each one of them.\n",
        "operationId": "circuitAvailability",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "description": "Id of the circuit rate.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "circuit_050a5ac6-78b9-4ca5-9629-9a0a494cd40b"
            }
          },
          {
            "$ref": "#/components/parameters/requestIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with circuit rates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AvailabilityCircuit"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "RequestId received in the request.",
                          "example": "e9f95047-fcc6-4b95-bad6-55587be545d0"
                        },
                        "query": {
                          "type": "object",
                          "properties": {
                            "item_id": {
                              "type": "string",
                              "description": "Id of the circuit which information was requested.",
                              "example": "circuit_050a5ac6-78b9-4ca5-9629-9a0a494cd40b"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/circuits/{itemId}/rates": {
      "get": {
        "tags": [
          "Circuits"
        ],
        "summary": "Gets a list of rates associated with a previous obtained rate.",
        "description": "# Gets a collection of circuit rates associated with a previous obtained rate. *This collection includes the original circuit rate*.\n",
        "operationId": "otherCircuitRates",
        "parameters": [
          {
            "in": "path",
            "name": "itemId",
            "description": "Id of the circuit rate.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "circuit_050a5ac6-78b9-4ca5-9629-9a0a494cd40b"
            }
          },
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "$ref": "#/components/parameters/sortByParam"
          },
          {
            "$ref": "#/components/parameters/sortDirectionParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam"
          },
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/minPriceParam"
          },
          {
            "$ref": "#/components/parameters/maxPriceParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a collection of circuit rates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "status of the request"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "status of the transaction"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "type of the data value"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "data": {
                      "type": "array",
                      "description": "Collection of circuit rates",
                      "items": {
                        "$ref": "#/components/schemas/Circuit"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/assistances": {
      "get": {
        "tags": [
          "Assistances"
        ],
        "summary": "Gets a list of travel assistances.",
        "description": "# Gets a collection of travel assistance rates within item format.\n",
        "operationId": "searchAssistances",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "$ref": "#/components/parameters/locationIdsParam"
          },
          {
            "$ref": "#/components/parameters/paxParam"
          },
          {
            "$ref": "#/components/parameters/dateInParam"
          },
          {
            "$ref": "#/components/parameters/dateOutParam"
          },
          {
            "$ref": "#/components/parameters/sortByParam"
          },
          {
            "$ref": "#/components/parameters/sortDirectionParam"
          },
          {
            "$ref": "#/components/parameters/perPageParam"
          },
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/currencyParam"
          },
          {
            "$ref": "#/components/parameters/minPriceParam"
          },
          {
            "$ref": "#/components/parameters/maxPriceParam"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Name of the assistance to match with.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Asistencia al viajero Master Mayores"
            }
          },
          {
            "in": "query",
            "name": "contract",
            "description": "Source of the results where to look.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "aero",
                "universal"
              ],
              "example": "aero"
            }
          },
          {
            "in": "query",
            "name": "default",
            "description": "When it is set, only the assistances that are marked as default are shown.",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a collection of travel assistance rates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "list"
                    },
                    "data": {
                      "type": "array",
                      "description": "Collection of travel assistance rates",
                      "items": {
                        "$ref": "#/components/schemas/Assistance"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "example": "831aa426-bf1d-42b7-be75-ebb24056e5f7"
                        },
                        "query": {
                          "type": "object",
                          "properties": {
                            "date_in": {
                              "$ref": "#/components/schemas/Date"
                            },
                            "date_out": {
                              "$ref": "#/components/schemas/Date"
                            },
                            "location_ids": {
                              "type": "array",
                              "items": {
                                "type": "integer",
                                "example": 3453
                              }
                            },
                            "pax": {
                              "type": "string",
                              "example": "1"
                            },
                            "sort_by": {
                              "type": "string",
                              "example": "price"
                            },
                            "sort_direction": {
                              "type": "string",
                              "example": "asc"
                            },
                            "page": {
                              "type": "integer",
                              "example": 1
                            },
                            "per_page": {
                              "type": "integer",
                              "example": 10
                            }
                          }
                        },
                        "static": {
                          "type": "object",
                          "properties": {
                            "min_price": {
                              "$ref": "#/components/schemas/AllCurrencies"
                            },
                            "max_price": {
                              "$ref": "#/components/schemas/AllCurrencies"
                            }
                          }
                        },
                        "min_price": {
                          "$ref": "#/components/schemas/AllCurrencies"
                        },
                        "max_price": {
                          "$ref": "#/components/schemas/AllCurrencies"
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "per_page": {
                          "type": "integer",
                          "example": 10
                        },
                        "total_results": {
                          "type": "integer",
                          "example": 12
                        },
                        "total_pages": {
                          "type": "integer",
                          "example": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/reservations/new": {
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "Gets a new provisional reservation.",
        "description": "# Gets a new provisional reservation.\n",
        "operationId": "newReservation",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a provisional reservation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "status of the request"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "status of the transaction"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "type of the data value",
                      "example": "reservation"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Reservation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/reservations": {
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "Gets a collection of provisional reservations for the user.",
        "description": "# Gets a collection of provisional reservations for the user.\n",
        "operationId": "listReservations",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a collection of reservations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "reservation"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Reservation"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      },
      "post": {
        "tags": [
          "Reservations"
        ],
        "summary": "Creates a reservation in MiddleOffice after confirming all the items.",
        "description": "# Creates a reservation in MiddleOffice after confirming all the items.\n*As a prerequisite, all items in the provisional reservation must be verified and the passengers\nmust be assigned to their respective spot, e.g. if an item was requested for two adults, then, \nbefore confirming, there must be two passengers in the reservation, and they must be assigned \nto the item spots.*  \n\n---\nIt books each item into its respective provider.\nThen, all of the successfully booked items are saved as services in MiddleOffice, \ncreating a new reservation, or updating an existing one if the `existing_reservation_id` field\nof the provisional reservation is set.\n",
        "operationId": "createReservation",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationId"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Standard response with a reservation as data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "reservation"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Reservation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/reservations/{reservationId}": {
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "Gets the details of a provisional reservation.",
        "description": "# Gets the details of a provisional reservation.\n",
        "operationId": "getReservation",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "in": "path",
            "name": "reservationId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "ID of the provisional reservation to get its details."
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a reservation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "reservation"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Reservation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      },
      "put": {
        "tags": [
          "Reservations"
        ],
        "summary": "Updates a provisional reservation.",
        "description": "# Update a provisional reservation.\n**This endpoint must be called before confirming the reservation.\nThe required parameters must be set.**\n",
        "operationId": "updateReservation",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "in": "path",
            "name": "reservationId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "ID of the provisional reservation to update. It's important to notice that this reservation does not exist in MiddleOffice yet, it's only provisional."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationEditableFields"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Standard response with a reservation as data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "status of the request"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "status of the transaction"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "type of the data value",
                      "example": "reservation"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Reservation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      },
      "delete": {
        "tags": [
          "Reservations"
        ],
        "summary": "Deletes a provisional reservation.",
        "description": "# Deletes a provisional reservation.\n",
        "operationId": "deleteReservation",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "in": "path",
            "name": "reservationId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "ID of the provisional reservation to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with the deleted reservation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "enum": [
                        "ok",
                        "error",
                        "warning"
                      ]
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "enum": [
                        "finished",
                        "continue",
                        "error"
                      ]
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "reservation"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Reservation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ReservationNotFoundError"
          }
        }
      }
    },
    "/reservations/{reservationId}/verify": {
      "post": {
        "tags": [
          "Reservations"
        ],
        "summary": "Verifies the items in the provisional reservation",
        "description": "# Verifies the items in the provisional reservation.\nSeveral checks are made at this point:\n  - It checks if the item has not expired in the cache.\n  - It checks item dependencies, e.g. if a flight requires a hotel to be successfully booked.\n  - When applies, availability validation is made, e.g. it is checked if a hotel rate is available in the provider.\n  - When applies, cancellation fees are requested from the provider in order to prevent or warn the user when cancellation charges may apply. If the item has fees, user's permissions are checked.\n\nThe results of this process are detailed in the field `summary` of the provisional reservation.\n\nWhen the transaction finishes, there must be a summary for each one of the items in the reservation, each one with the field `source` set to `verification`.\n\nIf the statuses of all summaries are `ok`, then the user may proceed with the reservation process. If there is at least one error, it must be solved before continuing, either by removing the item with error or meeting the requirements in case of a dependency error.\n",
        "operationId": "verifyReservation",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "in": "path",
            "name": "reservationId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "ID of the provisional reservation to verify."
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a reservation as data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok",
                      "description": "Status of the request"
                    },
                    "transaction_status": {
                      "type": "string",
                      "example": "finished",
                      "description": "Status of the transaction"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "reservation"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Reservation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/reservations/{reservationId}/confirmation_email": {
      "post": {
        "tags": [
          "Reservations"
        ],
        "summary": "Sends confirmation emails to both agency and holder.",
        "description": "# Sends confirmation emails to both agency and holder.\nThe following requirements must be met to successfully send the emails:\n- The application calling the endpoint must be Flexi.\n- The reservation must be confirmed successfully: `completed` field must be `true` and all summary statuses must be `ok`.\n- A holder must be assigned.\n\nThis endpoint expects only one item in the reservation, a flight or a hotel. If there are more than one item, only the emails for the first item will be sent. If the item is not a flight nor a hotel then the emails will not be sent.\n",
        "operationId": "sendConfirmationEmail",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "in": "path",
            "name": "reservationId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "ID of the provisional reservation to get its details."
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "agency_logo_url": {
                    "type": "string",
                    "example": "http://www.example.com/agency_logo.png",
                    "description": "URL of the agency's logo. This logo will be displayed in the sent emails."
                  },
                  "send_email_to_agency": {
                    "type": "boolean",
                    "example": false,
                    "description": "If this parameter is `true`, then the agency will receive the confirmation email.  \nIf this parameter's value is `false` or it is not set, then the email will not be sent to the agency. This is the default behavior."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Standard response with a reservation as data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "transaction_status",
                    "data_type",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "enum": [
                        "ok",
                        "error",
                        "warning"
                      ]
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "enum": [
                        "finished",
                        "continue",
                        "error"
                      ]
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "reservation"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Reservation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/reservations/{reservationId}/card_rules": {
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "Gets the credit cards promos of a provisional reservation. It responds with an array of available card rules, one for each installment.",
        "description": "# Gets the credit cards promos of a provisional reservation. It responds with an array of available card rules, one for each installment.\n",
        "operationId": "getReservationCardRules",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "in": "path",
            "name": "reservationId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "ID of the provisional reservation to get its details."
          },
          {
            "in": "query",
            "name": "card_id",
            "description": "Credit card ID",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "bank_id",
            "description": "Bank id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a reservation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "card_rules"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CardRule"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "RequestId received in the request.",
                          "example": "e9f95047-fcc6-4b95-bad6-55587be545d0"
                        },
                        "query": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/reservations/{reservationId}/items/{itemId}/observations": {
      "put": {
        "tags": [
          "Reservations"
        ],
        "summary": "Adds observations to a single item, present in the provisional reservation.",
        "description": "# Adds observations to a single item, present in the provisional reservation. This observations will be sent to MiddleOffice.\n",
        "operationId": "addItemObservations",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "in": "path",
            "name": "reservationId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "ID of the provisional reservation to delete."
          },
          {
            "in": "path",
            "name": "itemId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id of the item in the reservation. The observations will be added to this item."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reservation_observation": {
                    "type": "string",
                    "example": "Observation to be appended in the MiddleOffice's reservation observation.",
                    "description": "Observation of the item.  \nThis observation will be sent in the service sent to MiddleOffice, when this service is added to an existing reservation.  \nThis observation is not sent when a new reservation is created, it is only used for an existing reservation.  \nThis text will be appended to the general observation of the MiddleOffice's reservation.\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Standard response with the updated provisional reservation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "transaction_status",
                    "data_type",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "enum": [
                        "ok",
                        "error",
                        "warning"
                      ]
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "enum": [
                        "finished",
                        "continue",
                        "error"
                      ]
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "reservation"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Reservation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ReservationNotFoundError"
          }
        }
      }
    },
    "/reservations/{reservationId}/passengers/add": {
      "post": {
        "tags": [
          "Reservation spots"
        ],
        "summary": "Adds multiple passengers to the provisional reservation.",
        "description": "# Adds multiple passengers to the provisional reservation.\n",
        "operationId": "addPassengerToReservation",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "in": "path",
            "name": "reservationId",
            "description": "Id of the provisional reservation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "01daeb90-6e6d-43b7-89a4-d98dbd107c57"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "passengers"
                ],
                "properties": {
                  "passengers": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PassengerFields"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Standard response with a reservation as data. The new passengers are added to the `passengers` array with an unique identifier.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "enum": [
                        "ok"
                      ]
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "enum": [
                        "finished"
                      ]
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "reservation"
                    },
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Reservation"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "passengers": {
                              "type": "array",
                              "items": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/PassengerFields"
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "id"
                                    ],
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "Unique identifier for the passenger. It must be used for spot assignment.",
                                        "example": "88f30b43-3734-4420-b448-df87545a0c3f"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/reservations/{reservationId}/spots/{spotId}/passengers/{passengerId}": {
      "post": {
        "tags": [
          "Reservation spots"
        ],
        "summary": "Assigns a passenger to a spot.",
        "description": "# Assigns a passenger to a spot.\n",
        "operationId": "assignPassengerToSpot",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "in": "path",
            "name": "reservationId",
            "description": "Id of the provisional reservation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "01daeb90-6e6d-43b7-89a4-d98dbd107c57"
            }
          },
          {
            "in": "path",
            "name": "spotId",
            "description": "Id of the passenger target spot.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "f88fbffd-5702-46e3-ab73-232df454d093"
            }
          },
          {
            "in": "path",
            "name": "passengerId",
            "description": "Id of the passenger to assign to the spot.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a849af67-c179-4c7a-8f5b-14571849ae9d"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a reservation as data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "enum": [
                        "ok"
                      ]
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "enum": [
                        "finished"
                      ]
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "reservation"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Reservation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/reservations/{reservationId}/spots/{spotId}": {
      "delete": {
        "tags": [
          "Reservation spots"
        ],
        "summary": "Clears a spot out.",
        "description": "# Clears a spot out.\nIt removes all passengers assigned to the spot to allow their reassignment.  \nThe involved passengers are kept in the provisional reservation.\n",
        "operationId": "clearReservationSpot",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "in": "path",
            "name": "reservationId",
            "description": "Id of the provisional reservation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "01daeb90-6e6d-43b7-89a4-d98dbd107c57"
            }
          },
          {
            "in": "path",
            "name": "spotId",
            "description": "Id of the spot to clear out.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "f88fbffd-5702-46e3-ab73-232df454d093"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a reservation as data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "enum": [
                        "ok"
                      ]
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "enum": [
                        "finished"
                      ]
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "reservation"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Reservation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/reservations/{reservationId}/passengers/holder": {
      "put": {
        "tags": [
          "Reservation holder"
        ],
        "summary": "Adds holder information to the reservation. This data is used for further steps in the reservation process, e.g., to send emails after a successful confirmation.",
        "description": "# Adds holder information to the reservation. This data is used for further steps in the reservation process, e.g., to send emails after a successful confirmation.\nIt is mandatory to call this endpoint before confirming the reservation, as the information provided here is needed after the confirmation. This restriction only applies to Flexi.  \nIf there is a holder in the reservation, calling this endpoint will throw an error. If you want to change any field of the given holder, or the holder itself, you must delete it and then add it modified.\n",
        "operationId": "addReservationHolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "in": "path",
            "name": "reservationId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "ID of the provisional reservation where the holder will be added."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Holder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Standard response with the provisional reservation with the holder assigned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "transaction_status",
                    "data_type",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "enum": [
                        "ok",
                        "error",
                        "warning"
                      ]
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "enum": [
                        "finished",
                        "continue",
                        "error"
                      ]
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "reservation"
                    },
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Reservation"
                        },
                        {
                          "type": "object",
                          "required": [
                            "holder"
                          ],
                          "properties": {
                            "holder": {
                              "$ref": "#/components/schemas/Holder"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ReservationNotFoundError"
          }
        }
      },
      "delete": {
        "tags": [
          "Reservation holder"
        ],
        "summary": "Removes the holder from the reservation.",
        "description": "# Removes the holder from the reservation.\n",
        "operationId": "removeReservationHolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdParam"
          },
          {
            "in": "path",
            "name": "reservationId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "ID of the provisional reservation where the holder will be added."
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with the provisional reservation without the holder.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "transaction_status",
                    "data_type",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "enum": [
                        "ok",
                        "error",
                        "warning"
                      ]
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "enum": [
                        "finished",
                        "continue",
                        "error"
                      ]
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "reservation"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Reservation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ReservationNotFoundError"
          }
        }
      }
    },
    "/existing_reservations": {
      "get": {
        "tags": [
          "Existing Reservations"
        ],
        "summary": "Gets a collection of existing reservations from MiddleOffice.",
        "description": "# Gets a collection of existing reservations from MiddleOffice.\n",
        "operationId": "listExistingReservations",
        "parameters": [
          {
            "in": "header",
            "name": "X-Request-ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "description": "Could be both aptour_reserve_id or passenger first_name/last_name"
          },
          {
            "in": "query",
            "name": "status",
            "description": "Existing reservation status to filter by",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "agency_id",
            "description": "Id of the agency to filter by",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "date_in",
            "description": "Date in as yyyy-mm-dd.",
            "schema": {
              "$ref": "#/components/schemas/Date"
            }
          },
          {
            "in": "query",
            "name": "date_out",
            "description": "Date out as yyyy-mm-dd.",
            "schema": {
              "$ref": "#/components/schemas/Date"
            }
          },
          {
            "$ref": "#/components/parameters/perPageParam"
          },
          {
            "$ref": "#/components/parameters/pageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a collection of existing reservations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "status of the request"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "status of the transaction"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "type of the data value",
                      "example": "list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ExistingReservation"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/existing_reservations/{Id}": {
      "get": {
        "tags": [
          "Existing Reservations"
        ],
        "summary": "Get existing reservation details",
        "operationId": "ExistingReservationDetails",
        "parameters": [
          {
            "in": "header",
            "name": "X-Request-ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "Id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the existing reservation to get. It's important to notice that the id is the Middle Office Id and not the aptour_reserve_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a existing reservation details as data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "status of the request"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "status of the transaction"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "type of the data value",
                      "example": "existing_reservation"
                    },
                    "data": {
                      "$ref": "#/components/schemas/ExistingReservationDetails"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/agencies": {
      "get": {
        "tags": [
          "Agencies"
        ],
        "summary": "Gets a list of agencies",
        "description": "# Gets a list of agencies with name and id\n",
        "operationId": "agencies",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "pass an optional search string for looking up agencies by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "flexi_name",
            "description": "pass an optional search string for looking up agencies by flexi_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "agencies matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "transaction_status",
                    "data_type",
                    "data",
                    "metadata"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "list"
                    },
                    "data": {
                      "type": "array",
                      "description": "Collection of agencies",
                      "items": {
                        "$ref": "#/components/schemas/Agency"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "required": [
                        "request_id",
                        "query"
                      ],
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "example": "831aa426-bf1d-42b7-be75-ebb24056e5f7"
                        },
                        "query": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "example": "travel"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/countries": {
      "get": {
        "tags": [
          "Countries"
        ],
        "summary": "Gets a list of countries",
        "description": "# Gets a list of countries with name and id\n",
        "operationId": "countries",
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "description": "pass an optional search string for looking up countries",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "countries matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdAndText"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Gets a list of locations",
        "description": "# Gets a list of locations with name and id\n",
        "operationId": "locations",
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "description": "pass an optional search string for looking up locations",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "locations matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "transaction_status",
                    "data_type",
                    "data",
                    "metadata"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "list"
                    },
                    "data": {
                      "type": "array",
                      "description": "Collection of locations",
                      "items": {
                        "$ref": "#/components/schemas/SearchLocation"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "required": [
                        "request_id",
                        "query"
                      ],
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "example": "831aa426-bf1d-42b7-be75-ebb24056e5f7"
                        },
                        "query": {
                          "type": "object",
                          "properties": {
                            "q": {
                              "type": "string",
                              "example": "madrid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locations/with_hotels": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Gets a list of locations with Aero's hotels by country",
        "description": "# Gets a list of locations with Aero's hotels by country\n",
        "operationId": "locations_with_hotels",
        "responses": {
          "200": {
            "description": "locations with hotels by country",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "transaction_status",
                    "data_type",
                    "data",
                    "metadata"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "list"
                    },
                    "data": {
                      "type": "array",
                      "description": "Collection of locations by country",
                      "items": {
                        "$ref": "#/components/schemas/CountryWithLocations"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "required": [
                        "request_id",
                        "query"
                      ],
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "example": "831aa426-bf1d-42b7-be75-ebb24056e5f7"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/locations/popular": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Gets a list of popular locations classified by geographic regions.",
        "description": "# Gets a list of popular locations classified by geographic regions.\n",
        "operationId": "popularLocations",
        "responses": {
          "200": {
            "description": "Popular locations list organized by region",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "transaction_status",
                    "data_type",
                    "data",
                    "metadata"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "list"
                    },
                    "data": {
                      "type": "array",
                      "description": "Collection of popular locations",
                      "items": {
                        "$ref": "#/components/schemas/PopularLocationRegion"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "required": [
                        "request_id",
                        "query"
                      ],
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "example": "831aa426-bf1d-42b7-be75-ebb24056e5f7"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/user_info": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Gets information about the current user.",
        "description": "# Gets information about the current user.  \nThe user is defined by the token given for authentication.\n",
        "operationId": "userInfo",
        "responses": {
          "200": {
            "description": "Basic response with user info.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/cards": {
      "get": {
        "tags": [
          "Credit cards"
        ],
        "summary": "Gets a list of available credit cards",
        "description": "# Gets a list of available credit cards with name, id and code\n",
        "operationId": "cards",
        "responses": {
          "200": {
            "description": "Standard response with a collection of credit cards",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "cards"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Card"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "RequestId received in the request.",
                          "example": "e9f95047-fcc6-4b95-bad6-55587be545d0"
                        },
                        "query": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/banks": {
      "get": {
        "tags": [
          "Banks"
        ],
        "summary": "Gets a list of available banks",
        "description": "# Gets a list of available banks with name and id\n",
        "operationId": "banks",
        "responses": {
          "200": {
            "description": "Standard response with a collection of banks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "banks"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Bank"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "RequestId received in the request.",
                          "example": "e9f95047-fcc6-4b95-bad6-55587be545d0"
                        },
                        "query": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    },
    "/cities": {
      "get": {
        "tags": [
          "Cities"
        ],
        "summary": "Gets a list of available cities, filtered if a search criterion is given.",
        "description": "# Gets a list of available cities, filtered if a search criterion is given.\n",
        "operationId": "cities",
        "parameters": [
          {
            "in": "query",
            "name": "criteria",
            "description": "Search criterion. If it is specified, only cities that include this string in their name will be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "buenos"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard response with a collection of cities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "transaction_status",
                    "data_type",
                    "data",
                    "metadata"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Status of the request",
                      "example": "ok"
                    },
                    "transaction_status": {
                      "type": "string",
                      "description": "Status of the transaction",
                      "example": "finished"
                    },
                    "data_type": {
                      "type": "string",
                      "description": "Type of the data value",
                      "example": "list"
                    },
                    "data": {
                      "type": "array",
                      "description": "Collection of cities",
                      "items": {
                        "$ref": "#/components/schemas/City"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "required": [
                        "request_id",
                        "query"
                      ],
                      "properties": {
                        "request_id": {
                          "type": "string",
                          "example": "831aa426-bf1d-42b7-be75-ebb24056e5f7"
                        },
                        "query": {
                          "type": "object",
                          "properties": {
                            "criteria": {
                              "type": "string",
                              "example": "buenos"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/StandardError"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Hotels"
    },
    {
      "name": "Flights"
    },
    {
      "name": "Land Products"
    },
    {
      "name": "Assistances"
    },
    {
      "name": "Packages",
      "description": "*A package is a **compound** item: it has one or more items of the kind hotel, \nflight or land product.  \nWhen adding a package to a reservation, each item will be added alone.\nThat said, if the package is compound by a hotel and a flight, the reservation \nwill have an item hotel and an item flight.  \nYou won’t find an item of kind package inside a reservation.*\n"
    },
    {
      "name": "Circuits"
    },
    {
      "name": "Reservations"
    },
    {
      "name": "Reservation spots",
      "description": "*When adding an item to a reservation, a spot will be also added to the reservation.\nAs you can have multiple items into one reservation, it’s important to know what \npassenger corresponds to each item. For example, when booking a hotel item with two \nrooms, you want to know what is going to be the passenger distribution (what \npassenger will sleep in each room).  \nThen, a **Spot** element lets you assign one or more passengers within an item. \nEach item will have a unique spot.*\n"
    },
    {
      "name": "Reservation holder"
    },
    {
      "name": "Existing Reservations"
    },
    {
      "name": "Agencies"
    },
    {
      "name": "Cities"
    },
    {
      "name": "Countries"
    }
  ],
  "components": {
    "schemas": {
      "Hotel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Item"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "example": "Riu Plaza Miami Beach"
              },
              "kind": {
                "example": "hotel"
              },
              "info": {
                "$ref": "#/components/schemas/HotelInfo"
              }
            }
          }
        ]
      },
      "HotelInfo": {
        "type": "object",
        "required": [
          "id",
          "hotel_id",
          "name",
          "address",
          "stars",
          "longitude",
          "latitude",
          "regime"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "99573aff"
          },
          "hotel_id": {
            "type": "string",
            "description": "Identifier of the hotel given by the provider. It is used when additional information about this hotel is requested.",
            "example": "T45-fK5T-3na"
          },
          "name": {
            "type": "string",
            "description": "Transliterated name used by the filter by name.",
            "example": "Riu Plaza Miami Beach"
          },
          "address": {
            "type": "string",
            "description": "Address of the hotel.",
            "example": "3101 Collins Ave"
          },
          "stars": {
            "type": "integer",
            "description": "Number of stars of the hotel.",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ],
            "example": 4
          },
          "longitude": {
            "type": "string",
            "example": "-80.124218"
          },
          "latitude": {
            "type": "string",
            "example": "25.806871"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HotelImage"
            }
          },
          "amenities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HotelAmenity"
            }
          },
          "nemo_info": {
            "type": "string",
            "description": "Hotel Id in PriceSurfer of this hotel. It is used to obtain the additional information of the hotel from PriceSurfer. At the moment, only Aero hotels use this field.",
            "nullable": true,
            "example": "CCL-2XW-30S"
          },
          "promo": {
            "type": "string",
            "description": "Description about the promotion that applies for the hotel rate. It is present only in Aero hotel tariffs.",
            "example": "Sin promo"
          },
          "can_sell": {
            "type": "boolean",
            "description": "If it is true, the hotel rate is available for sell.",
            "example": true
          },
          "stop_sales": {
            "type": "array",
            "description": "Only for Aero hotel rates.",
            "items": {
              "type": "string"
            }
          },
          "regime": {
            "type": "object",
            "description": "Regime of the hotel tariff. Available regimes can be obtained from [here](#/Hotels/hotelRegimes).",
            "properties": {
              "code": {
                "type": "integer",
                "example": 1
              },
              "name": {
                "type": "string",
                "enum": [
                  "Sólo alojamiento",
                  "Sólo desayuno",
                  "Media pensión",
                  "Pensión completa"
                ]
              }
            }
          },
          "rooms": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "type",
                "original_type",
                "details",
                "occupancy"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Type of the room",
                  "enum": [
                    "Double",
                    "Triple",
                    "Twin",
                    "Single"
                  ],
                  "example": "Double"
                },
                "original_type": {
                  "type": "string",
                  "description": "Original room type returned by the provider. This is converted to one of the common room types (field `type`).",
                  "example": "DBL"
                },
                "details": {
                  "type": "string",
                  "description": "Detailed description of the room.",
                  "example": "Habitación doble"
                },
                "occupancy": {
                  "type": "string",
                  "description": "It defines the type and number of passengers for which this room is for. The first number is the number of adult passengers that this room allows. The next number is the number of children and the last is the number of infants. For example, if the occupancy is 2/0/0, the room is for 2 adults, 0 children and 0 infants. The difference between children and infants is given by their ages. Usually, an infant is a passenger which age is 0 or 1 years old, a child is 2 to 15 years old and passengers of more than 16 years old are considered adults. The exact age ranges are given by the rate provider.",
                  "pattern": "^\\d+/\\d+/\\d+$",
                  "example": "2/0/0"
                },
                "availability": {
                  "type": "string",
                  "description": "Availability of the room",
                  "enum": [
                    "CNF",
                    "NOP"
                  ]
                },
                "comment": {
                  "type": "string",
                  "description": "Comment for the room. It is used mainly for Aero hotel rates.",
                  "example": "(Ex Moon Palace Golf & Spa Resort)"
                }
              }
            }
          },
          "additional_regime": {
            "type": "object",
            "description": "Additional regimes of the hotel. Only for Aero hotel rates."
          },
          "markup": {
            "type": "number",
            "description": "Only for Aero hotel rates.",
            "format": "float"
          },
          "cancellation": {
            "type": "object",
            "required": [
              "status",
              "charges"
            ],
            "properties": {
              "status": {
                "type": "string",
                "description": "Cancellation status of the hotel rate.  \nThe status `with_fee` means that the rate actually has cancellation fees, so if users reserve this rate, and immediately cancel the reservation, they will have to pay the penalty fee.  \nThe status `without_fee` means that the rate has cancellation fees, but they start to rule in the future, not at the moment the rate was generated.  \nWhen it is not possible to determine the cancellation fees, the status will be `unknown`.\n",
                "enum": [
                  "without_fee",
                  "with_fee",
                  "unknown"
                ]
              },
              "charges": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Fee"
                }
              }
            }
          }
        }
      },
      "HotelAdditionalInformation": {
        "type": "object",
        "required": [
          "name",
          "address",
          "latitude",
          "longitude",
          "stars",
          "descriptions",
          "images",
          "amenities"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "TURQUOIZE AT HYATT ZIVA CANCUN - ALL INCLUSIVE"
          },
          "address": {
            "type": "string",
            "example": "BLVD. KUKULCÁN MANZANA 51 LOTE 7"
          },
          "latitude": {
            "type": "string",
            "example": "21.135805"
          },
          "longitude": {
            "type": "string",
            "example": "-86.741928"
          },
          "stars": {
            "type": "integer",
            "example": 5
          },
          "descriptions": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "type",
                "description"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Identifier of the description.",
                  "enum": [
                    "general",
                    "location",
                    "rooms",
                    "category",
                    "exterior",
                    "lobby",
                    "restaurant"
                  ]
                },
                "description": {
                  "type": "string",
                  "description": "A description provided by the hotel operator",
                  "example": "El resort más codiciado de Cancún, ahora se complementa con Turquoize, un paraíso sereno que ofrece - acceso a un lujo ilimitado - solo para adultos - dentro de un resort para todas las edades. Esta es la Evolución del Todo Incluido®, exclusivamente en Hyatt Ziva Cancún."
                }
              }
            }
          },
          "amenities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HotelAmenity"
            }
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HotelImage"
            }
          }
        }
      },
      "HotelImage": {
        "type": "object",
        "required": [
          "image"
        ],
        "properties": {
          "image": {
            "type": "string",
            "example": "http://www.example.com/full/image.jpg"
          },
          "thumbnail": {
            "type": "string",
            "example": "http://www.example.com/thumbnail/image.jpg"
          },
          "width": {
            "type": "string",
            "example": "0.0"
          },
          "height": {
            "type": "string",
            "example": "0.0"
          },
          "order": {
            "type": "integer",
            "example": "0"
          }
        }
      },
      "HotelAmenity": {
        "type": "object",
        "required": [
          "name",
          "description",
          "code"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the amenity.",
            "example": "Gimnasio"
          },
          "description": {
            "type": "string",
            "description": "A detailed description of the amenity. It often matches with the name.",
            "example": "Gimnasio todo el día"
          },
          "fee": {
            "type": "boolean",
            "description": "It defines if the amenity is included with the rate, or if the guest has to pay to use it.",
            "example": false
          },
          "code": {
            "type": "string",
            "description": "A general code that indicates the category of the amenity.",
            "enum": [
              "gym",
              "bar",
              "accesibility_facility",
              "aa",
              "swimming_pool",
              "elevator",
              "parking",
              "cyber_cafe",
              "restaurant",
              "wifi",
              "other"
            ]
          }
        }
      },
      "HotelTariff": {
        "type": "object",
        "required": [
          "name",
          "id",
          "stars",
          "description",
          "warning_to_quote",
          "tariffs"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Beach Palace"
          },
          "id": {
            "type": "integer",
            "example": 558
          },
          "stars": {
            "type": "integer",
            "example": 5
          },
          "description": {
            "type": "string",
            "example": "DIRECCIÓN: Blvd. Kukulcan Km 11.5 (Zona Hotelera) Cancún, Quintana Roo"
          },
          "warning_to_quote": {
            "type": "string",
            "example": ""
          },
          "tariffs": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "max_occupation",
                "id",
                "fare_liness_tariffs"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Superior Deluxe Vista Laguna"
                },
                "max_occupation": {
                  "type": "integer",
                  "example": 4
                },
                "id": {
                  "type": "integer",
                  "example": 7798
                },
                "fare_liness_tariffs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "visivility": {
                        "type": "boolean"
                      },
                      "markup": {
                        "type": "string",
                        "example": "20.0"
                      },
                      "from": {
                        "$ref": "#/components/schemas/Date"
                      },
                      "to": {
                        "$ref": "#/components/schemas/Date"
                      },
                      "single": {
                        "type": "string",
                        "nullable": true,
                        "example": "540.0"
                      },
                      "double": {
                        "type": "string",
                        "nullable": true,
                        "example": "570.1"
                      },
                      "triple": {
                        "type": "string",
                        "nullable": true,
                        "example": "600.0"
                      },
                      "quadruple": {
                        "type": "string",
                        "nullable": true,
                        "example": null
                      },
                      "apartment": {
                        "type": "string",
                        "nullable": true,
                        "example": null
                      },
                      "price_infoa1": {
                        "type": "string",
                        "nullable": true,
                        "example": "0.0"
                      },
                      "infoa_age_min1": {
                        "type": "number",
                        "nullable": true,
                        "example": 0
                      },
                      "infoa_age_max1": {
                        "type": "number",
                        "nullable": true,
                        "example": 3.99
                      },
                      "price_infoa2": {
                        "type": "string",
                        "nullable": true,
                        "example": "0.0"
                      },
                      "infoa_age_min2": {
                        "type": "number",
                        "nullable": true,
                        "example": null
                      },
                      "infoa_age_max2": {
                        "type": "number",
                        "nullable": true,
                        "example": null
                      },
                      "price_child1": {
                        "type": "string",
                        "nullable": true,
                        "example": "50.0"
                      },
                      "child_age_min1": {
                        "type": "number",
                        "nullable": true,
                        "example": 4
                      },
                      "child_age_max1": {
                        "type": "number",
                        "nullable": true,
                        "example": 11.99
                      },
                      "price_child2": {
                        "type": "string",
                        "nullable": true,
                        "example": "50.0"
                      },
                      "child_age_min21": {
                        "type": "number",
                        "nullable": true,
                        "example": 4
                      },
                      "child_age_max2": {
                        "type": "number",
                        "nullable": true,
                        "example": 11.99
                      },
                      "price_child3": {
                        "type": "string",
                        "nullable": true,
                        "example": "50.0"
                      },
                      "child_age_min3": {
                        "type": "number",
                        "nullable": true,
                        "example": 11.99
                      },
                      "child_age_max3": {
                        "type": "number",
                        "nullable": true,
                        "example": 16.99
                      },
                      "price_child4": {
                        "type": "string",
                        "nullable": true,
                        "example": "50.0"
                      },
                      "child_age_min4": {
                        "type": "number",
                        "nullable": true,
                        "example": 11.99
                      },
                      "child_age_max4": {
                        "type": "number",
                        "nullable": true,
                        "example": 16.99
                      },
                      "price_child5": {
                        "type": "string",
                        "nullable": true,
                        "example": null
                      },
                      "child_age_min5": {
                        "type": "number",
                        "nullable": true,
                        "example": null
                      },
                      "child_age_max5": {
                        "type": "number",
                        "nullable": true,
                        "example": null
                      },
                      "price_child6": {
                        "type": "string",
                        "nullable": true,
                        "example": null
                      },
                      "child_age_min6": {
                        "type": "number",
                        "nullable": true,
                        "example": null
                      },
                      "child_age_max6": {
                        "type": "number",
                        "nullable": true,
                        "example": null
                      },
                      "price_child7": {
                        "type": "string",
                        "nullable": true,
                        "example": null
                      },
                      "child_age_min7": {
                        "type": "number",
                        "nullable": true,
                        "example": null
                      },
                      "child_age_max7": {
                        "type": "number",
                        "nullable": true,
                        "example": null
                      },
                      "price_child8": {
                        "type": "string",
                        "nullable": true,
                        "example": null
                      },
                      "child_age_min8": {
                        "type": "number",
                        "nullable": true,
                        "example": null
                      },
                      "child_age_max8": {
                        "type": "number",
                        "nullable": true,
                        "example": null
                      },
                      "regimen": {
                        "type": "string",
                        "example": "AI"
                      },
                      "additional_regimes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "promotion": {
                        "type": "string",
                        "nullable": true,
                        "example": null
                      },
                      "restriction": {
                        "type": "string",
                        "nullable": true,
                        "example": null
                      },
                      "expiration_date": {
                        "type": "string",
                        "nullable": true,
                        "example": null
                      },
                      "currency": {
                        "type": "string",
                        "enum": [
                          "USD",
                          "ARS",
                          "EUR",
                          "GBP"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "HotelCategory": {
        "type": "object",
        "required": [
          "name",
          "stop_sales"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Deluxe - Resort View"
          },
          "stop_sales": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "from": {
                  "$ref": "#/components/schemas/Date"
                },
                "to": {
                  "$ref": "#/components/schemas/Date"
                }
              }
            }
          }
        }
      },
      "Flight": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Item"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Cupo LA 02 Octubre"
              },
              "source": {
                "type": "string",
                "enum": [
                  "aero",
                  "netviax"
                ],
                "example": "aero"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "flight"
                ],
                "example": "flight"
              },
              "info": {
                "$ref": "#/components/schemas/FlightInfo"
              }
            }
          }
        ]
      },
      "FlightInfo": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "99573aff"
          },
          "name": {
            "type": "string",
            "example": "Cupo LA 02 Octubre"
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "ARS",
              "EUR",
              "GBP"
            ],
            "example": "USD"
          },
          "nights": {
            "type": "integer",
            "example": 4
          },
          "vacancies": {
            "type": "integer",
            "example": 3
          },
          "date_in": {
            "$ref": "#/components/schemas/Date"
          },
          "date_out": {
            "$ref": "#/components/schemas/Date"
          },
          "arrival_date": {
            "$ref": "#/components/schemas/Date"
          },
          "destination_in": {
            "$ref": "#/components/schemas/Date"
          },
          "destination_out": {
            "$ref": "#/components/schemas/Date"
          },
          "passengers_count": {
            "type": "object",
            "properties": {
              "INF": {
                "type": "integer",
                "example": 0
              },
              "CNN": {
                "type": "integer",
                "example": 0
              },
              "ADT": {
                "type": "integer",
                "example": 0
              }
            }
          },
          "passengers_prices": {
            "type": "object",
            "properties": {
              "INF": {
                "type": "number",
                "example": 0
              },
              "CNN": {
                "type": "number",
                "example": 0
              },
              "ADT": {
                "type": "number",
                "example": 0
              }
            }
          },
          "passengers_taxes": {
            "type": "object",
            "properties": {
              "INF": {
                "type": "number",
                "example": 0
              },
              "CNN": {
                "type": "number",
                "example": 0
              },
              "ADT": {
                "type": "number",
                "example": 0
              }
            }
          },
          "markup": {
            "type": "integer",
            "example": 5
          },
          "can_be_alone": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "airline": {
            "$ref": "#/components/schemas/Airline"
          },
          "departure_flights": {
            "type": "object",
            "properties": {
              "elapsed_flight_time_in_minutes": {
                "type": "integer",
                "example": 875
              },
              "flights": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FlightLeg"
                }
              }
            }
          },
          "arrival_flights": {
            "type": "object",
            "properties": {
              "elapsed_flight_time_in_minutes": {
                "type": "integer",
                "example": 875
              },
              "flights": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FlightLeg"
                }
              }
            }
          },
          "origin": {
            "$ref": "#/components/schemas/FlightOrigin"
          },
          "baggage_included": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "Airline": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "American Airlines"
          },
          "code": {
            "type": "string",
            "pattern": "^[A-Z]{2}$",
            "example": "AA"
          }
        }
      },
      "FlightLeg": {
        "type": "object",
        "properties": {
          "flight_number": {
            "type": "string",
            "example": "LA2411"
          },
          "airline": {
            "$ref": "#/components/schemas/Airline"
          },
          "departure": {
            "$ref": "#/components/schemas/FlightSecuence"
          },
          "arrival": {
            "$ref": "#/components/schemas/FlightSecuence"
          }
        }
      },
      "FlightSecuence": {
        "type": "object",
        "properties": {
          "date": {
            "$ref": "#/components/schemas/DateTime"
          },
          "airport": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "pattern": "^[A-Z]{3}$",
                "example": "LIM"
              },
              "name": {
                "type": "string",
                "example": "Aeropuerto Internacional Jorge Chavez - Lima"
              }
            }
          }
        }
      },
      "FlightOrigin": {
        "type": "object",
        "required": [
          "id",
          "name",
          "iata_code",
          "country_iso_code",
          "type"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 3453
          },
          "name": {
            "type": "string",
            "example": "México, Cancún"
          },
          "iata_code": {
            "type": "string",
            "example": "CUN"
          },
          "country_iso_code": {
            "type": "string",
            "example": "MX"
          },
          "type": {
            "type": "string",
            "enum": [
              "location",
              "city"
            ]
          }
        }
      },
      "LandProduct": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Item"
          },
          {
            "type": "object",
            "properties": {
              "info": {
                "$ref": "#/components/schemas/LandProductInfo"
              }
            }
          }
        ]
      },
      "LandProductInfo": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "kind"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "99573aff"
          },
          "description": {
            "type": "string",
            "example": "something really descriptive"
          },
          "name": {
            "type": "string",
            "example": "Riu Plaza Miami Beach"
          },
          "operator_id": {
            "type": "integer",
            "example": 101
          },
          "operator_name": {
            "type": "string",
            "example": "Action Travel"
          },
          "provider_id": {
            "type": "integer",
            "example": 4
          },
          "provider_name": {
            "type": "string",
            "example": "Action Travel"
          },
          "observations": {
            "type": "string",
            "example": ""
          },
          "child_age_from": {
            "type": "integer",
            "example": 0
          },
          "child_age_to": {
            "type": "integer",
            "example": 2
          },
          "kind": {
            "type": "string",
            "enum": [
              "transfer",
              "admission",
              "excursion",
              "visa"
            ]
          },
          "category": {
            "type": "string",
            "enum": [
              "regular",
              "private"
            ]
          },
          "operation_days": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "from": {
            "type": "string",
            "example": "Aeropuerto de Miami"
          },
          "to": {
            "type": "string",
            "example": "Downtown"
          },
          "with_transfer": {
            "type": "boolean"
          },
          "schedule_operation": {
            "type": "string",
            "example": "05.00/22:00"
          },
          "excursion_duration": {
            "type": "string",
            "enum": [
              "half_day",
              "full_day"
            ]
          },
          "transfer_kind": {
            "type": "string",
            "enum": [
              "in",
              "out",
              "in_out"
            ],
            "example": "in_out"
          },
          "children_allowed": {
            "type": "boolean"
          },
          "priority": {
            "type": "integer",
            "example": 50
          },
          "days_amount": {
            "type": "integer"
          },
          "quoted_default": {
            "type": "boolean"
          },
          "visibility": {
            "type": "boolean"
          },
          "rate": {
            "type": "object"
          },
          "daily": {
            "type": "boolean"
          }
        }
      },
      "Assistance": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Item"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Asistencia al viajero Master"
              },
              "source": {
                "type": "string",
                "enum": [
                  "aero",
                  "universal"
                ],
                "example": "aero"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "assistance"
                ],
                "example": "assistance"
              },
              "info": {
                "$ref": "#/components/schemas/AssistanceItemInfo"
              }
            }
          }
        ]
      },
      "AssistanceItemInfo": {
        "type": "object",
        "required": [
          "id",
          "name",
          "quoted_default",
          "locations",
          "legend"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the assistance only useful for the provider.",
            "example": 6
          },
          "name": {
            "type": "string",
            "description": "Transliterated name of the assistance, used by the name filter.",
            "example": "Asistencia al viajero Master"
          },
          "tarifa_in_cents": {
            "type": "number",
            "description": "Only present in Aero assistance rates.",
            "example": 750
          },
          "valor_neto_in_cents": {
            "type": "number",
            "description": "Only present in Aero assistance rates.",
            "example": 600
          },
          "legend": {
            "type": "string",
            "example": "Cobertura: USD 25.000 tope. Producto exclusivo de convenio comisionable."
          },
          "created_at": {
            "$ref": "#/components/schemas/DateTime"
          },
          "updated_at": {
            "$ref": "#/components/schemas/DateTime"
          },
          "visibility": {
            "type": "boolean",
            "example": true
          },
          "quoted_default": {
            "type": "boolean",
            "example": false
          },
          "markup": {
            "type": "number",
            "example": 5
          },
          "locations": {
            "type": "array",
            "description": "Country Ids where this assistance offers coverage.",
            "items": {
              "type": "integer",
              "example": [
                1,
                5,
                60
              ]
            }
          }
        }
      },
      "Package": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Item"
          },
          {
            "type": "object",
            "properties": {
              "info": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Hotel"
                    },
                    {
                      "$ref": "#/components/schemas/Flight"
                    },
                    {
                      "$ref": "#/components/schemas/LandProduct"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "Circuit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Item"
          },
          {
            "type": "object",
            "properties": {
              "info": {
                "$ref": "#/components/schemas/CircuitInfo"
              }
            }
          }
        ]
      },
      "CircuitInfo": {
        "type": "object",
        "required": [
          "id",
          "name",
          "start_date",
          "confirmation_express",
          "duration",
          "country_codes",
          "location_names",
          "description"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 25559
          },
          "name": {
            "type": "string",
            "example": "EUROPA GRAN TOUR I"
          },
          "start_date": {
            "$ref": "#/components/schemas/Date"
          },
          "confirmation_express": {
            "type": "boolean",
            "example": false
          },
          "start_location": {
            "type": "string",
            "example": "América"
          },
          "end_location": {
            "type": "string",
            "example": "Madrid"
          },
          "duration": {
            "type": "integer",
            "example": 7
          },
          "country_codes": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[A-Z]{2}",
              "example": [
                "ES",
                "FR",
                "IT"
              ]
            }
          },
          "location_names": {
            "type": "array",
            "items": {
              "type": "string",
              "example": [
                "Madrid",
                "Paris",
                "Roma"
              ]
            }
          },
          "description": {
            "type": "string",
            "example": "Servicio de Asistencia telefónica 24 HORAS. Modernos autocares dotados con mejores medidas de seguridad. Guía acompañante de habla hispana.. Traslados de llegada y salida del aeropuerto principal. Seguro de Viaje (coberturas de acuerdo a folleto). Crucero por el Rhin. Guías locales en español en las visitas indicadas en el itinerario. Desayuno diario,  Buffet (en la mayoría de los hoteles). Almuerzos y cenas indicadas en el itinerario."
          },
          "observations": {
            "type": "string"
          },
          "rate_category": {
            "type": "string",
            "example": "Selección"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "http://www.example.com/circuit/image.jpg"
            }
          },
          "amenities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CircuitAmenity"
            }
          },
          "other_rates": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "CircuitAmenity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HotelAmenity"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Desayuno"
              },
              "description": {
                "type": "string",
                "example": "Desayuno"
              },
              "code": {
                "type": "string",
                "enum": [
                  "breakfast",
                  "half_board",
                  "full_board",
                  "wifi",
                  "bus",
                  "train",
                  "plane",
                  "ship",
                  "excursion",
                  "transfer",
                  "guide"
                ]
              }
            }
          }
        ]
      },
      "CircuitInformation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Circuit"
          },
          {
            "type": "object",
            "properties": {
              "info": {
                "type": "object",
                "properties": {
                  "itinerary": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CircuitItineraryDay"
                    }
                  },
                  "hotels": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CircuitHotel"
                    }
                  },
                  "visited_locations": {
                    "type": "array",
                    "description": "All the visited locations during the circuit.",
                    "items": {
                      "type": "string",
                      "example": [
                        "Madrid",
                        "Trujillo",
                        "Lisboa",
                        "Fatima",
                        "Sevilla"
                      ]
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "CircuitItineraryDay": {
        "type": "object",
        "properties": {
          "day": {
            "type": "integer",
            "description": "Day number",
            "example": 1
          },
          "title": {
            "type": "string",
            "description": "Title that summarizes the day",
            "example": "MADRID-TRUJILLO-LISBOA"
          },
          "visited_locations": {
            "type": "array",
            "description": "All the locations visited in the day",
            "items": {
              "type": "string",
              "example": [
                "Madrid",
                "Trujillo",
                "Lisboa"
              ]
            }
          },
          "sleep_location": {
            "type": "string",
            "description": "Location where the passenger will sleep in this day",
            "example": "Lisboa"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of what is going to be done in the day",
            "example": "Salida de nuestra terminal a las 08.00 hacia Extremadura para llegar a Trujillo, donde tendremos tiempo libre para conocer su bella y monumental Plaza Mayor. Continuación hacia la frontera portuguesa para llegar a Lisboa. Alojamiento."
          },
          "included": {
            "type": "string"
          },
          "not_included": {
            "type": "string"
          },
          "observations": {
            "type": "string",
            "description": "Observations of the day"
          }
        }
      },
      "CircuitHotel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Hotel name",
            "example": "GRAN HOTEL REGENTE"
          },
          "country": {
            "type": "string",
            "description": "Country where the hotel is located",
            "example": "ESPAÑA"
          },
          "city": {
            "type": "string",
            "description": "City where the hotel is located",
            "example": "Oviedo"
          },
          "category": {
            "type": "string",
            "description": "Category of the hotel. Could be a stars rating or a description provided by the service.",
            "example": "Clase P"
          },
          "observations": {
            "type": "string",
            "description": "Observations for the hotel, provided by the service."
          }
        }
      },
      "AvailabilityCircuit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Circuit"
          },
          {
            "type": "object",
            "properties": {
              "info": {
                "type": "object",
                "properties": {
                  "other_rates": {
                    "type": "boolean",
                    "description": "Indicates if there are other rates for this circuit start date.",
                    "example": true
                  },
                  "items": {
                    "type": "array",
                    "description": "Reduced information about the other rates.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "circuit_b08b28da-ee95-4618-936d-b967834b1e32"
                        },
                        "category": {
                          "type": "string",
                          "example": "Superior"
                        },
                        "total": {
                          "$ref": "#/components/schemas/AllCurrencies"
                        },
                        "rates": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Rate"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "CardRule": {
        "type": "object",
        "required": [
          "id",
          "bank_id",
          "card_id",
          "card_code",
          "card_name",
          "bank_name",
          "installments",
          "coefficient",
          "installment_amount",
          "total_amount",
          "payment_token"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 396
          },
          "bank_id": {
            "type": "integer",
            "example": 18
          },
          "card_id": {
            "type": "integer",
            "example": 3
          },
          "card_code": {
            "type": "string",
            "example": "VI"
          },
          "card_name": {
            "type": "string",
            "example": "Visa"
          },
          "bank_name": {
            "type": "string",
            "example": "Comafi"
          },
          "installments": {
            "type": "integer",
            "example": 2
          },
          "coefficient": {
            "type": "number",
            "format": "float",
            "example": 1.0528
          },
          "installment_amount": {
            "type": "object",
            "properties": {
              "usd_value": {
                "type": "number",
                "format": "float",
                "example": 439.56
              },
              "ars_value": {
                "type": "number",
                "format": "float",
                "example": 8197.65
              },
              "eur_value": {
                "type": "number",
                "format": "float",
                "example": 351.83
              },
              "gbp_value": {
                "type": "number",
                "format": "float",
                "example": 335.54
              }
            }
          },
          "total_amount": {
            "type": "object",
            "properties": {
              "usd_value": {
                "type": "number",
                "format": "float",
                "example": 879.11
              },
              "ars_value": {
                "type": "number",
                "format": "float",
                "example": 16395.3
              },
              "eur_value": {
                "type": "number",
                "format": "float",
                "example": 703.66
              },
              "gbp_value": {
                "type": "number",
                "format": "float",
                "example": 671.08
              }
            }
          },
          "payment_token": {
            "type": "string",
            "example": "31346270"
          }
        }
      },
      "Agency": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Wayne Travel"
          },
          "flexi_name": {
            "type": "string",
            "example": "wayne_travel"
          },
          "address": {
            "type": "string",
            "example": "San Martín 498 3"
          },
          "phone": {
            "type": "string",
            "example": "11-4871234"
          },
          "email": {
            "type": "string",
            "example": "info@wayne.travel.com"
          },
          "seller_email": {
            "type": "string",
            "example": "seller@wayne.travel.com"
          },
          "latitude": {
            "type": "string",
            "example": -32.945909
          },
          "longitude": {
            "type": "string",
            "example": -60.638045
          }
        }
      },
      "Card": {
        "type": "object",
        "required": [
          "id",
          "name",
          "code"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Visa"
          },
          "code": {
            "type": "string",
            "example": "VI"
          }
        }
      },
      "Bank": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Santander Rio"
          }
        }
      },
      "City": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the city",
            "example": 5
          },
          "name": {
            "type": "string",
            "description": "Name of the city",
            "example": "Buenos Aires"
          },
          "iata_code": {
            "type": "string",
            "description": "IATA code of the city",
            "example": "BUE"
          },
          "name_with_iata": {
            "type": "string",
            "description": "Name of the city with its IATA code prefixed",
            "example": "BUE - Buenos Aires"
          }
        }
      },
      "Reservation": {
        "type": "object",
        "required": [
          "id",
          "user_token",
          "notifications",
          "summary",
          "completed",
          "passengers",
          "items",
          "agency_id",
          "reservation_id",
          "seller_email",
          "passengers_distribution",
          "total",
          "gross",
          "taxes",
          "holder",
          "expires_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "99573aff"
          },
          "user_token": {
            "type": "string",
            "format": "uuid",
            "example": "99573aff"
          },
          "notifications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "summary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Summary"
            }
          },
          "completed": {
            "type": "boolean",
            "description": "Indicates if the action is completed or not",
            "example": false
          },
          "passengers": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "agency_id": {
            "type": "integer",
            "example": 2580
          },
          "reservation_id": {
            "type": "string",
            "format": "uuid",
            "description": "MiddleOffice reservation id"
          },
          "seller_email": {
            "type": "string",
            "example": "arturo@puig.com"
          },
          "passengers_distribution": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "observations": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "item_id",
                "reservation_observations"
              ],
              "properties": {
                "item_id": {
                  "type": "string",
                  "example": "hotel_cde8bdab-c430-4d9b-b2a6-51fa13cd7ce2"
                },
                "reservation_observations": {
                  "type": "string",
                  "example": "Observation of the item to be appended to the MiddleOffice's reservation observation."
                }
              }
            }
          },
          "total": {
            "$ref": "#/components/schemas/Rate"
          },
          "gross": {
            "$ref": "#/components/schemas/Rate"
          },
          "taxes": {
            "$ref": "#/components/schemas/Rate"
          },
          "holder": {
            "type": "object"
          },
          "expires_at": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "ReservationEditableFields": {
        "type": "object",
        "required": [
          "agency_id",
          "seller_email"
        ],
        "properties": {
          "agency_id": {
            "type": "integer",
            "description": "Id of the agency that is making/editing the reservation."
          },
          "seller_email": {
            "type": "string",
            "description": "Email address of the seller."
          },
          "existing_reservation_id": {
            "type": "integer",
            "description": "Id of the existing reservation. Adding this field indicates that confirming this reservation, will add services to an existing reservation instead of creating a new one."
          },
          "note": {
            "type": "string",
            "description": "Note about the reservation that will be sent to MiddleOffice."
          },
          "emails": {
            "type": "string",
            "description": "Comma separated email list that will be sent to MiddleOffice."
          }
        }
      },
      "PassengerFields": {
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "document_type",
          "document_number"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "example": "Nombre"
          },
          "last_name": {
            "type": "string",
            "example": "Apellido"
          },
          "cuil": {
            "type": "string",
            "pattern": "\\d{11}",
            "example": "20343434341"
          },
          "document_type": {
            "type": "string",
            "enum": [
              "DNI",
              "VISA",
              "PASAPORTE"
            ],
            "example": "DNI"
          },
          "document_number": {
            "type": "string",
            "example": "34343434"
          },
          "address": {
            "type": "string",
            "example": "Calle falsa 123"
          },
          "birthdate": {
            "$ref": "#/components/schemas/Date"
          },
          "nationality": {
            "type": "string",
            "example": "Argentina"
          },
          "age_type": {
            "type": "string",
            "enum": [
              "adult",
              "child",
              "minor"
            ],
            "example": "adult"
          },
          "observations": {
            "type": "string",
            "example": "Observaciones del pasajero."
          }
        }
      },
      "Summary": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ok",
              "error",
              "warning"
            ],
            "description": "Status of the verification/confirmation of the item.",
            "example": "error"
          },
          "app": {
            "type": "string",
            "description": "Internal application name that generated the summary.",
            "example": "MIDDLE_OFFICE"
          },
          "element_id": {
            "type": "string",
            "description": "Id of the element that was verified or confirmed. Could be an item id or a passenger id.",
            "example": "hotel_cde8bdab-c430-4d9b-b2a6-51fa13cd7ce2"
          },
          "element_name": {
            "type": "string",
            "description": "Name of the element that was verified or confirmed. Could be an item name or a passenger name formatted like *Firstname Lastname*.",
            "example": "Riu Plaza Miami Beach"
          },
          "source": {
            "type": "string",
            "enum": [
              "verification",
              "reservation"
            ],
            "description": "Type of request that generated the summary. If a summary is generated in the verification process, its source will be *verification*. If a summary is generated in the confirmation process, its source will be *confirmation*."
          },
          "booking_code": {
            "type": "string",
            "description": "When source is `reservation` this field could have a value.",
            "nullable": true,
            "example": null
          },
          "expires_at": {
            "$ref": "#/components/schemas/DateTime"
          },
          "data": {
            "type": "object",
            "description": "Misc information."
          },
          "type": {
            "type": "string",
            "description": "Indicates the error that has happened. This field is required when status is not `ok`. For more information, visit the next link https://hackmd.io/s/HJlyb4uzM",
            "nullable": true,
            "enum": [
              "expiration",
              "service_timeout",
              "failed_transaction",
              "availability",
              "cannot_be_alone",
              "cancellation_fees",
              "middle_office"
            ],
            "example": "middle_office"
          },
          "subtype": {
            "type": "string",
            "description": "Adds information to the error type. For more information, visit the next link https://hackmd.io/s/HJlyb4uzM",
            "nullable": true,
            "example": "service_error"
          },
          "suggested_message": {
            "type": "string",
            "description": "An internationalized message that summarizes what happened. It can be present only when an error has ocurred, i.e. type is not `null`.",
            "nullable": true,
            "example": "Se produjo un error al intentar crear el servicio para la reserva."
          }
        }
      },
      "Holder": {
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "telephone",
          "email"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "example": "Juan",
            "description": "Name of the holder."
          },
          "last_name": {
            "type": "string",
            "example": "Pérez",
            "description": "Lastname of the holder."
          },
          "document": {
            "type": "object",
            "required": [
              "type",
              "number"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "DNI",
                  "PAS"
                ]
              },
              "number": {
                "type": "string",
                "example": "12345678"
              }
            }
          },
          "email": {
            "type": "string",
            "example": "example@example.com"
          },
          "address": {
            "type": "string",
            "example": "52 231"
          },
          "city_name": {
            "type": "string",
            "example": "La Plata"
          },
          "telephone": {
            "type": "object",
            "required": [
              "country_code",
              "area_code",
              "number"
            ],
            "properties": {
              "country_code": {
                "type": "string",
                "example": "+54"
              },
              "area_code": {
                "type": "string",
                "example": "221"
              },
              "number": {
                "type": "string",
                "example": "213123123"
              }
            }
          }
        }
      },
      "ExistingReservation": {
        "type": "object",
        "required": [
          "id",
          "person_id",
          "last_name",
          "first_name",
          "document_type",
          "foreigner",
          "document_number",
          "cant_pax",
          "date_in",
          "date_out",
          "aptour_reserve_id",
          "has_liquidation",
          "has_voucher"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 35195
          },
          "person_id": {
            "type": "integer",
            "example": 72713
          },
          "last_name": {
            "type": "string",
            "example": "Sampras"
          },
          "first_name": {
            "type": "string",
            "example": "Pete"
          },
          "document_type": {
            "type": "string",
            "enum": [
              "DNI",
              "PASSPORT"
            ],
            "example": "DNI"
          },
          "birthdate": {
            "type": "string"
          },
          "foreigner": {
            "type": "boolean",
            "description": "Indicates if pax is a foreigner",
            "example": false
          },
          "document_number": {
            "type": "string",
            "example": "34566101"
          },
          "cant_pax": {
            "type": "integer",
            "description": "Pax amount of the reservation",
            "example": 2
          },
          "aptour_reserve_id": {
            "type": "integer",
            "example": 341330,
            "description": "Id of the reservation in aptour (null when reservation is not in aptour yet)"
          },
          "date_in": {
            "$ref": "#/components/schemas/Date"
          },
          "date_out": {
            "$ref": "#/components/schemas/Date"
          },
          "has_liquidation": {
            "type": "integer",
            "enum": [
              0,
              1
            ]
          },
          "has_voucher": {
            "type": "integer",
            "enum": [
              0,
              1
            ]
          }
        }
      },
      "ExistingReservationDetails": {
        "type": "object",
        "required": [
          "total",
          "pending",
          "destination",
          "operative_id",
          "services",
          "passengers",
          "details"
        ],
        "properties": {
          "total": {
            "$ref": "#/components/schemas/Rate"
          },
          "pending": {
            "$ref": "#/components/schemas/Rate"
          },
          "destination": {
            "type": "string",
            "example": "México, Cancún"
          },
          "operative_id": {
            "type": "string"
          },
          "services": {
            "type": "array",
            "example": []
          },
          "passengers": {
            "type": "array",
            "example": []
          },
          "details": {
            "type": "string"
          }
        }
      },
      "Location": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 3453
          },
          "name": {
            "type": "string",
            "example": "México, Cancún"
          },
          "country_iso_code": {
            "type": "string",
            "pattern": "[A-Z]{2}",
            "example": "MX"
          }
        }
      },
      "BasicLocation": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 3453
          },
          "name": {
            "type": "string",
            "example": "México, Cancún"
          }
        }
      },
      "CountryWithLocations": {
        "type": "object",
        "required": [
          "id",
          "text"
        ],
        "properties": {
          "country": {
            "type": "string",
            "example": "España"
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryLocation"
            }
          }
        }
      },
      "CountryLocation": {
        "type": "object",
        "required": [
          "id",
          "name",
          "priority",
          "country_code"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 2016
          },
          "name": {
            "type": "string",
            "example": "España, Madrid"
          },
          "priority": {
            "type": "number",
            "example": 657
          },
          "country_code": {
            "type": "string",
            "example": "ES"
          }
        }
      },
      "SearchLocation": {
        "type": "object",
        "required": [
          "id",
          "text"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 2016
          },
          "text": {
            "type": "string",
            "example": "España, Madrid"
          }
        }
      },
      "PopularLocationRegion": {
        "type": "object",
        "required": [
          "name",
          "locations"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Caribe y Resto de América"
          },
          "category": {
            "type": "string",
            "example": "cotizador"
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 3453
                },
                "name": {
                  "type": "string",
                  "example": "México, Cancún"
                }
              }
            }
          }
        }
      },
      "Item": {
        "type": "object",
        "required": [
          "id",
          "name",
          "expires_at",
          "locations",
          "operator",
          "provider_id",
          "date_in",
          "date_out",
          "kind",
          "source",
          "currency",
          "total",
          "rates",
          "query_spots",
          "notifications",
          "info"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "1218176c-9bb9-4fb6-a076-f0b90d55e9c1"
          },
          "name": {
            "type": "string",
            "example": "Hotel Corregidor"
          },
          "expires_at": {
            "$ref": "#/components/schemas/DateTime"
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "operator": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 2301,
                "nullable": true
              },
              "name": {
                "type": "string",
                "example": "RIU"
              },
              "initials": {
                "type": "string",
                "example": "RIU"
              }
            }
          },
          "provider_id": {
            "type": "integer",
            "example": 123
          },
          "date_in": {
            "$ref": "#/components/schemas/Date"
          },
          "date_out": {
            "$ref": "#/components/schemas/Date"
          },
          "kind": {
            "type": "string",
            "enum": [
              "hotel",
              "flight",
              "land_product",
              "assistance",
              "circuit",
              "package"
            ],
            "example": "hotel"
          },
          "source": {
            "type": "string",
            "example": "nemo",
            "enum": [
              "nemo",
              "aero",
              "iberostar",
              "netviax",
              "special",
              "trapsatur",
              "universal",
              "multiple"
            ]
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD",
              "ARS",
              "EUR",
              "GBP"
            ],
            "example": "USD"
          },
          "total": {
            "$ref": "#/components/schemas/AllCurrencies"
          },
          "rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rate"
            }
          },
          "query_spots": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "adults_number": {
                  "type": "integer",
                  "example": 2
                },
                "children_ages": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "example": 2,
                    "minimum": 0,
                    "maximum": 12
                  }
                }
              }
            }
          },
          "notifications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Rate": {
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "gross",
              "net",
              "taxes",
              "commission"
            ],
            "example": "gross"
          },
          "value": {
            "type": "object",
            "properties": {
              "ars_value": {
                "type": "number",
                "format": "float",
                "example": 100
              },
              "usd_value": {
                "type": "number",
                "format": "float",
                "example": 100
              },
              "eur_value": {
                "type": "number",
                "format": "float",
                "example": 100
              },
              "gbp_value": {
                "type": "number",
                "format": "float",
                "example": 100
              }
            }
          }
        }
      },
      "AeroFlight": {
        "type": "object",
        "required": [
          "arrival_date",
          "coin",
          "company",
          "country_name",
          "date_in",
          "date_out",
          "departure",
          "depature",
          "departure_date",
          "depature_date",
          "destination_name",
          "locations",
          "id",
          "imp_rg",
          "net_price",
          "nights",
          "semaphore",
          "vacant",
          "rg",
          "total"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 3838
          },
          "destination_name": {
            "type": "string",
            "example": "HABANA"
          },
          "coin": {
            "type": "string",
            "enum": [
              "USD",
              "ARS",
              "EUR",
              "GBP"
            ]
          },
          "country_name": {
            "type": "string",
            "example": "Cuba"
          },
          "nights": {
            "type": "integer",
            "example": 10
          },
          "company": {
            "type": "string",
            "example": "Aerolineas Argentinas"
          },
          "departure": {
            "type": "string",
            "example": "EZE"
          },
          "depature": {
            "deprecated": true,
            "description": "It will be deprecated. Use `departure` instead."
          },
          "departure_date": {
            "$ref": "#/components/schemas/Date"
          },
          "depature_date": {
            "deprecated": true,
            "description": "It will be deprecated. Use `departure_date` instead."
          },
          "arrival_date": {
            "$ref": "#/components/schemas/Date"
          },
          "vacant": {
            "type": "integer",
            "example": 4
          },
          "net_price": {
            "type": "integer",
            "example": 63
          },
          "semaphore": {
            "type": "string",
            "enum": [
              "green",
              "red"
            ]
          },
          "imp_rg": {
            "type": "integer",
            "example": 857
          },
          "commissionable": {
            "type": "boolean",
            "example": true
          },
          "total": {
            "$ref": "#/components/schemas/Rate"
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicLocation"
            }
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "required": [
          "agency_id",
          "email",
          "role",
          "permissions",
          "agency_name",
          "seller_id"
        ],
        "properties": {
          "agency_id": {
            "type": "integer",
            "example": 8787
          },
          "email": {
            "type": "string",
            "example": "example@email.com"
          },
          "role": {
            "type": "string",
            "enum": [
              "seller",
              "agency"
            ]
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "agency_name": {
            "type": "string",
            "example": "Nombre de agencia"
          },
          "seller_id": {
            "type": "integer",
            "nullable": true,
            "example": null
          }
        }
      },
      "Id": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "asbca123"
          }
        }
      },
      "IdAndText": {
        "type": "object",
        "required": [
          "id",
          "text"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 123
          },
          "text": {
            "type": "string",
            "example": "A name"
          }
        }
      },
      "ReservationId": {
        "type": "object",
        "description": "Id of the provisional reservation.",
        "required": [
          "reservation_id"
        ],
        "properties": {
          "reservation_id": {
            "type": "string",
            "format": "uuid",
            "example": "e53092ae-5cbf-463a-9ae1-19f1e4ae4afd"
          }
        }
      },
      "Metadata": {
        "type": "object",
        "required": [
          "request_id",
          "query"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "gross",
              "net",
              "taxes",
              "commission"
            ],
            "example": "gross"
          },
          "value": {
            "type": "object",
            "properties": {
              "ars_value": {
                "type": "number",
                "format": "float",
                "example": 100
              },
              "usd_value": {
                "type": "number",
                "format": "float",
                "example": 100
              },
              "eur_value": {
                "type": "number",
                "format": "float",
                "example": 100
              },
              "gbp_value": {
                "type": "number",
                "format": "float",
                "example": 100
              }
            }
          }
        }
      },
      "AllCurrencies": {
        "type": "object",
        "properties": {
          "ars_value": {
            "type": "number",
            "format": "float",
            "example": 100
          },
          "usd_value": {
            "type": "number",
            "format": "float",
            "example": 100
          },
          "eur_value": {
            "type": "number",
            "format": "float",
            "example": 100
          },
          "gbp_value": {
            "type": "number",
            "format": "float",
            "example": 100
          }
        }
      },
      "Fee": {
        "type": "object",
        "required": [
          "type",
          "prices",
          "from",
          "to"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cancellation",
              "no-show",
              "change"
            ],
            "example": "cancellation"
          },
          "description": {
            "type": "string",
            "example": "Una noche de penalidad si cancelás hasta 3 días antes de la fecha de entrada"
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rate"
            }
          },
          "from": {
            "$ref": "#/components/schemas/DateTime"
          },
          "to": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "DateTime": {
        "type": "string",
        "pattern": "^[0-9]{4}\\-((0[0-9]|1[0-2])){1}-([01][0-9])T(([01]([0-9])|(2[0-4])){1}:?([0-5][0-9])){1}(:?([0-5][0-9])(.([0-9]+))?)?(Z|(\\+|\\-)([01]([0-9])|(2[0-4])){1}((:)?([0-5][0-9]){1})?){1}$",
        "example": "2017-10-12T23:45:00.000+00:00"
      },
      "Date": {
        "type": "string",
        "pattern": "^[0-9]{4}\\-((0[1-9]|1[0-2])){1}-([012][0-9]|3[01])$",
        "example": "2017-10-12"
      },
      "HourMinuteDuration": {
        "type": "string",
        "pattern": "\\d+:[0-5][0-9]",
        "example": "10:50"
      },
      "Time": {
        "type": "string",
        "pattern": "(?:[01][0-9]|2[0-3]):[0-5][0-9]",
        "example": "20:31"
      }
    },
    "responses": {
      "StandardError": {
        "description": "Standard error response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "error": {
                  "type": "object",
                  "description": "Information about one or more errors",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code",
                      "example": 666
                    },
                    "message": {
                      "type": "string",
                      "description": "General error message",
                      "example": "Los siguientes proveedores respondieron con error: NEMO, AERO"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "domain": {
                            "type": "string",
                            "description": "Domain app that generated the error",
                            "enum": [
                              "NEMO",
                              "AERO",
                              "SPECIAL",
                              "TRAPSATUR",
                              "NETVIAX"
                            ]
                          },
                          "reason": {
                            "type": "string",
                            "description": "Reason that generated the error",
                            "example": "Connection timeout"
                          },
                          "message": {
                            "type": "string",
                            "description": "Specific error message. When there is only one error, this message will be the same as the general error message"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ReservationNotFoundError": {
        "description": "Error response when the reservation is not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "error"
                  ]
                },
                "error": {
                  "type": "object",
                  "description": "Information about one or more errors",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code",
                      "example": 123
                    },
                    "message": {
                      "type": "string",
                      "description": "General error message",
                      "example": "La reserva no existe"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "domain": {
                            "type": "string",
                            "description": "Domain app that generated the error",
                            "enum": [
                              "RESERVATIONMANAGER"
                            ]
                          },
                          "reason": {
                            "type": "string",
                            "description": "Reason that generated the error",
                            "example": "ReservationNotFound"
                          },
                          "message": {
                            "type": "string",
                            "description": "Specific error message. When there is only one error, this message will be the same as the general error message",
                            "example": "La reserva no existe"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "requestIdParam": {
        "in": "header",
        "name": "X-Request-ID",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Identifier of the current request. Allows to identificate multiple requests corresponding to the same transaction (because the API works with polling). Should be sent with each request in order to group all the related requests."
      },
      "sortByParam": {
        "in": "query",
        "name": "sort_by",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "price"
          ],
          "example": "price"
        },
        "description": "Sort criteria to use."
      },
      "sortDirectionParam": {
        "in": "query",
        "name": "sort_direction",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "default": "asc"
        },
        "description": "Sort direction to use."
      },
      "perPageParam": {
        "in": "query",
        "name": "per_page",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 10,
          "minimum": 1
        },
        "description": "Number of items to include in the requested page."
      },
      "pageParam": {
        "in": "query",
        "name": "page",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 1,
          "minimum": 1
        },
        "description": "Number of items to include in the requested page."
      },
      "optionalLocationIdsParam": {
        "in": "query",
        "name": "location_ids",
        "description": "Ids of the locations where to search in. For services that don't accept multiple locations will search in the first location only.",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "^(\\d{1,5})((,\\s*\\d{1,5})*)?",
          "example": "3453, 1234"
        }
      },
      "locationIdsParam": {
        "in": "query",
        "name": "location_ids",
        "description": "Ids of the locations where to search in. For services that don't accept multiple locations will search in the first location only.",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^(\\d{1,5})((,\\s*\\d{1,5})*)?",
          "example": "3453, 1234"
        }
      },
      "countryIdsParam": {
        "in": "query",
        "name": "country_ids",
        "description": "Ids of the countries where to search in.",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^(\\d{1,5})((,\\s*\\d{1,5})*)?",
          "example": "2, 34"
        }
      },
      "paxParam": {
        "in": "query",
        "name": "pax",
        "description": "Distribution of passengers. For services that don't accept multiple distributions will search using the first distribution only. On each distribution, first digit refers to adults amount and all the next numbers refer to children ages.",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "(?:^[1-9](?:-[01]?[0-8])*|,\\s*[1-9](?:-[01]?[0-8])*)+$",
          "example": "3-4-5, 2-1, 2"
        }
      },
      "dateInParam": {
        "in": "query",
        "name": "date_in",
        "description": "Date in as yyyy-mm-dd.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Date"
        }
      },
      "dateOutParam": {
        "in": "query",
        "name": "date_out",
        "description": "Date out as yyyy-mm-dd.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Date"
        }
      },
      "optionalDateInParam": {
        "in": "query",
        "name": "date_in",
        "description": "Date in as yyyy-mm-dd.",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/Date"
        }
      },
      "optionalDateOutParam": {
        "in": "query",
        "name": "date_out",
        "description": "Date out as yyyy-mm-dd.",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/Date"
        }
      },
      "minPriceParam": {
        "in": "query",
        "name": "min_price",
        "description": "Minimum price accepted.",
        "required": false,
        "schema": {
          "type": "number",
          "format": "float"
        }
      },
      "maxPriceParam": {
        "in": "query",
        "name": "max_price",
        "description": "Maximum price accepted.",
        "required": false,
        "schema": {
          "type": "number",
          "format": "float"
        }
      },
      "currencyParam": {
        "in": "query",
        "name": "currency",
        "description": "Currency to use within price filters.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "usd",
            "ars",
            "eur",
            "gbp"
          ]
        }
      },
      "airlinesParam": {
        "in": "query",
        "name": "airlines",
        "description": "IATA airlines codes. It selects the flights that are provided by any of the specified airlines.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "LA"
          }
        }
      }
    }
  }
}